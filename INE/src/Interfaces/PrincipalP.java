/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import Clases.Conexion;
import Clases.CrearPaseSalida;
import Clases.Excel;
import Clases.ManagerPases;
import Clases.ManagerPermisos;
import Formularios.addSolicitudPermisos;
import Formularios.visSolicitudPase;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTextArea;
import javax.swing.JButton;
import javax.swing.SpinnerDateModel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import org.jvnet.substance.SubstanceLookAndFeel;

/**
 *
 * @author guillermo
 */
public class PrincipalP extends javax.swing.JFrame {
    
    Conexion cbd = new Conexion();
    Connection cn = cbd.getConexion();
    ManagerPases manager_pases;
    DefaultTableModel modelo;
    visSolicitudPase vsp;
    ManagerPermisos manager_permisos;
    boolean limpiar = false;
    String fechag="";
    String responarea="";

    /**
     * Creates new form PrincipalP
     */
    public PrincipalP() {
        initComponents();
        //this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        setLocationRelativeTo(null);
        setIconImage(new ImageIcon(getClass().getResource("/Iconos/IEE.png")).getImage());
        //tablasolic.setModel(manager_soviaticos.getTasol()); 
        tablapase.getTableHeader().setReorderingAllowed(false);
        manager_pases = new ManagerPases();
        manager_permisos=new ManagerPermisos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MenuPases = new javax.swing.JPopupMenu();
        Nueva = new javax.swing.JMenuItem();
        Imprimir = new javax.swing.JMenuItem();
        Hora_llegada = new javax.swing.JMenuItem();
        Consultar = new javax.swing.JMenuItem();
        Cancelar = new javax.swing.JMenuItem();
        ExportarExcel = new javax.swing.JMenuItem();
        Cambiarvehiculo = new javax.swing.JMenuItem();
        solicpase = new javax.swing.JTabbedPane();
        solicitudviaticos1 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane11 = new javax.swing.JScrollPane();
        tablapase = new JTable(){  public boolean isCellEditable(int rowIndex, int colIndex){  return false;  }  };
        jLabel17 = new javax.swing.JLabel();
        txtbusquedasoli = new javax.swing.JTextField();
        comboAño = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuInterfaces = new javax.swing.JMenu();
        mi_viaticos = new javax.swing.JMenuItem();
        mi_pases = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        itemSalir = new javax.swing.JMenuItem();

        Nueva.setText("Nuevo Pase");
        Nueva.setToolTipText("");
        Nueva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevaActionPerformed(evt);
            }
        });
        MenuPases.add(Nueva);

        Imprimir.setText("Imprimir Pase");
        Imprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImprimirActionPerformed(evt);
            }
        });
        MenuPases.add(Imprimir);

        Hora_llegada.setText("Actualizar hora de llegada");
        Hora_llegada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Hora_llegadaActionPerformed(evt);
            }
        });
        MenuPases.add(Hora_llegada);

        Consultar.setText("Consultar Pase");
        Consultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsultarActionPerformed(evt);
            }
        });
        MenuPases.add(Consultar);

        Cancelar.setText("Cancelar Pase");
        Cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarActionPerformed(evt);
            }
        });
        MenuPases.add(Cancelar);

        ExportarExcel.setText("Exportar Excel Pases");
        ExportarExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportarExcelActionPerformed(evt);
            }
        });
        MenuPases.add(ExportarExcel);

        Cambiarvehiculo.setText("Cambiar Vehículo");
        Cambiarvehiculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CambiarvehiculoActionPerformed(evt);
            }
        });
        MenuPases.add(Cambiarvehiculo);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Sistema Integral - Instituto Estatal Electoral de Nayarit");
        setPreferredSize(new java.awt.Dimension(1366, 793));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        solicpase.setBackground(new java.awt.Color(255, 204, 204));
        solicpase.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        solicitudviaticos1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                solicitudviaticos1MouseReleased(evt);
            }
        });
        solicitudviaticos1.setLayout(null);

        jPanel16.setBackground(java.awt.Color.white);

        jScrollPane11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jScrollPane11MouseReleased(evt);
            }
        });

        tablapase.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Folio", "Nombre", "Puesto", "Área", "Fecha", "Hora_E/S", "Hora_llegada", "Horas", "Tipo_horario", "Tipo_asunto", "Asunto", "Estado", "Vehículo_pase"
            }
        ));
        tablapase.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablapaseMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tablapaseMouseReleased(evt);
            }
        });
        jScrollPane11.setViewportView(tablapase);

        jTabbedPane1.addTab("Solicitud de Pase E/S", new javax.swing.ImageIcon(getClass().getResource("/Iconos/solicitudes.png")), jScrollPane11); // NOI18N

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
        );

        solicitudviaticos1.add(jPanel16);
        jPanel16.setBounds(20, 170, 1300, 470);

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel17.setText("Búsqueda:");
        solicitudviaticos1.add(jLabel17);
        jLabel17.setBounds(37, 124, 100, 22);

        txtbusquedasoli.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtbusquedasoli.setToolTipText("Busqueda en general");
        txtbusquedasoli.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtbusquedasoli.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtbusquedasoliKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtbusquedasoliKeyReleased(evt);
            }
        });
        solicitudviaticos1.add(txtbusquedasoli);
        txtbusquedasoli.setBounds(130, 120, 290, 30);

        comboAño.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        comboAño.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboAñoActionPerformed(evt);
            }
        });
        solicitudviaticos1.add(comboAño);
        comboAño.setBounds(530, 120, 120, 30);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/banner pases.png"))); // NOI18N
        solicitudviaticos1.add(jLabel5);
        jLabel5.setBounds(20, 20, 1350, 80);

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel20.setText("Por Año:");
        solicitudviaticos1.add(jLabel20);
        jLabel20.setBounds(450, 124, 100, 22);

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/formularios.png"))); // NOI18N
        solicitudviaticos1.add(jLabel19);
        jLabel19.setBounds(0, 0, 1366, 769);

        solicpase.addTab("Pases de Entrada/Salida", new javax.swing.ImageIcon(getClass().getResource("/Iconos/solicitudes.png")), solicitudviaticos1); // NOI18N

        menuInterfaces.setText("Archivo");

        mi_viaticos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        mi_viaticos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/viatico.png"))); // NOI18N
        mi_viaticos.setText("Viáticos");
        mi_viaticos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_viaticosActionPerformed(evt);
            }
        });
        menuInterfaces.add(mi_viaticos);

        mi_pases.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        mi_pases.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/pase.png"))); // NOI18N
        mi_pases.setText("Inventario");
        mi_pases.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_pasesActionPerformed(evt);
            }
        });
        menuInterfaces.add(mi_pases);
        menuInterfaces.add(jSeparator1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/if_Exit_728935.png"))); // NOI18N
        jMenuItem2.setText("Cerrar sesión");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        menuInterfaces.add(jMenuItem2);

        itemSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        itemSalir.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        itemSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/if_Shutdown_Box_Red_34246.png"))); // NOI18N
        itemSalir.setText("Salir");
        itemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSalirActionPerformed(evt);
            }
        });
        menuInterfaces.add(itemSalir);

        jMenuBar1.add(menuInterfaces);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(solicpase, javax.swing.GroupLayout.PREFERRED_SIZE, 1378, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(solicpase, javax.swing.GroupLayout.PREFERRED_SIZE, 740, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablapaseMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablapaseMouseReleased
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {
            int r = tablapase.rowAtPoint(evt.getPoint());
            if (r >= 0 && r < tablapase.getRowCount()) {
                tablapase.setRowSelectionInterval(r, r);
            }
            MenuPases.show(evt.getComponent(), evt.getX(), evt.getY());//Mostramos el popMenu en la posición donde esta el cursor

        }//clic derecho
    }//GEN-LAST:event_tablapaseMouseReleased

    private void tablapaseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablapaseMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tablapaseMouseClicked

    private void jScrollPane11MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane11MouseReleased
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {
            MenuPases.show(evt.getComponent(), evt.getX(), evt.getY());//Mostramos el popMenu en la posición donde esta el cursor
        }//clic derecho
    }//GEN-LAST:event_jScrollPane11MouseReleased

    private void txtbusquedasoliKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbusquedasoliKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtbusquedasoliKeyPressed

    private void txtbusquedasoliKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbusquedasoliKeyReleased
        // TODO add your handling code here:
            
        
            modelo = new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return false;
                }
            };
            //modelo.addColumn("idSolicitud");
            modelo.addColumn("Folio");
            modelo.addColumn("Nombre");
            modelo.addColumn("Puesto");
            modelo.addColumn("Área");
            modelo.addColumn("Fecha");
            modelo.addColumn("Hora_E/S");
            modelo.addColumn("Hora_Llegada");
            modelo.addColumn("Horas");
            modelo.addColumn("Tipo_Horario");
            modelo.addColumn("Tipo_Asunto");
            modelo.addColumn("Asunto");
            modelo.addColumn("Estado");
            modelo.addColumn("Vehículo_pase");
            this.tablapase.setModel(modelo);
            String yeara=comboAño.getSelectedItem().toString();
            try {
                String sql="";
            
            ResultSet usuario=cbd.getTabla("select puesto from User where id_user='"+Principal.Username+"'", cn);
            usuario.next();
                      
                ResultSet idemp=cbd.getTabla("select id_empleado from User where id_user='"+Principal.Username+"'", cn);
                idemp.next();
                
                ResultSet numarea=cbd.getTabla("select area from Empleados where id_empleado='"+idemp.getString("id_empleado")+"'", cn);
                numarea.next();
                
                ResultSet area=cbd.getTabla("select Area from Area where ID_area='"+numarea.getString("area")+"'", cn);
                area.next();
                    
            if(usuario.getString("puesto").equals("SuperUsuario") || usuario.getString("puesto").equals("Administrador")){
                 sql = "SELECT concat(Folio,'-',Numero), Nombre, Puesto, Area, Fecha, Hora_ES, Hora_Llegada,Horas, Tipo_Horario, Tipo_Asunto,Asunto,Estado,Vehiculo_pase FROM solicitud_pase WHERE Año = '" + yeara + "' And (Numero LIKE '%" + txtbusquedasoli.getText() + "%'"
                    + "OR Nombre LIKE '%" + txtbusquedasoli.getText() + "%' OR Puesto LIKE '%" + txtbusquedasoli.getText() + "%' OR Area LIKE '%" + txtbusquedasoli.getText() + "%' OR Fecha LIKE '%" + txtbusquedasoli.getText() + "%'"
                    + "OR Hora_ES LIKE '%" + txtbusquedasoli.getText() + "%' OR Hora_Llegada LIKE '%" + txtbusquedasoli.getText() + "%' OR Tipo_Horario LIKE '%" + txtbusquedasoli.getText() + "%' OR Tipo_Asunto LIKE '%" + txtbusquedasoli.getText() + "%' OR Estado LIKE '%" + txtbusquedasoli.getText() + "%')";             
            }else{
                sql = "SELECT concat(Folio,'-',Numero), Nombre, Puesto, Area, Fecha, Hora_ES, Hora_Llegada, Horas, Tipo_Horario, Tipo_Asunto,Asunto,Estado,Vehiculo_pase FROM solicitud_pase WHERE Año = '" + yeara + "' And Area = '" + area.getString("Area") + "' And (Numero LIKE '%" + txtbusquedasoli.getText() + "%'"
                    + "OR Nombre LIKE '%" + txtbusquedasoli.getText() + "%' OR Puesto LIKE '%" + txtbusquedasoli.getText() + "%' OR Area LIKE '%" + txtbusquedasoli.getText() + "%' OR Fecha LIKE '%" + txtbusquedasoli.getText() + "%'"
                    + "OR Hora_ES LIKE '%" + txtbusquedasoli.getText() + "%' OR Hora_Llegada LIKE '%" + txtbusquedasoli.getText() + "%' OR Tipo_Horario LIKE '%" + txtbusquedasoli.getText() + "%' OR Tipo_Asunto LIKE '%" + txtbusquedasoli.getText() + "%' OR Estado LIKE '%" + txtbusquedasoli.getText() + "%')";
                
                }

            Statement sentencia = cn.createStatement();

                ResultSet rs = sentencia.executeQuery(sql);

                String solicitud[] = new String[13];
                while (rs.next()) {
                    solicitud[0] = rs.getString("concat(Folio,'-',Numero)");
                    solicitud[1] = rs.getString("Nombre");
                    solicitud[2] = rs.getString("Puesto");
                    solicitud[3] = rs.getString("Area");
                    solicitud[4] = rs.getString("Fecha");
                    solicitud[5] = rs.getString("Hora_ES");
                    solicitud[6] = rs.getString("Hora_Llegada");
                    solicitud[7] = rs.getString("Horas");
                    solicitud[8] = rs.getString("Tipo_Horario");
                    solicitud[9] = rs.getString("Tipo_Asunto");
                    solicitud[10] = rs.getString("Asunto");
                    solicitud[11] = rs.getString("Estado");
                    solicitud[12] = rs.getString("Vehiculo_pase");
                    modelo.addRow(solicitud);
                }
                //rs.close();
                sentencia.close();
            } catch (SQLException ex) {
                javax.swing.JOptionPane.showMessageDialog(null, "Error al consultar los datos");
            }          
            
    }//GEN-LAST:event_txtbusquedasoliKeyReleased

    private void solicitudviaticos1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_solicitudviaticos1MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_solicitudviaticos1MouseReleased

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        fechag=getfecha();
        tablapase.setModel(manager_pases.getTasolpa(fechag));
        inseryear(fechag); 
        
        comboAño.setModel(new javax.swing.DefaultComboBoxModel(new String[] {}));
        manager_pases.getYear(comboAño);
        //String an=comboAño.getSelectedItem().toString();
        
        //JOptionPane.showMessageDialog(null,an);
        
        //System.out.print(fechag);
    }//GEN-LAST:event_formWindowActivated

    private void NuevaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevaActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("alta", "Pase Salida", Principal.Username)) {
            /*try {
                for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (Exception e) {
                // If Nimbus is not available, you can set the GUI to another look and feel.
            }*/
            addSolicitudPermisos asv = new addSolicitudPermisos(this,true); 
            asv.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para realizar pases de salida.");
        }
    }//GEN-LAST:event_NuevaActionPerformed

    private void ImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImprimirActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("consulta", "Pase Salida", Principal.Username)) {
            int fila = tablapase.getSelectedRow();
            //CrearPaseSalida cps = new CrearPaseSalida();
            CrearPaseSalida cps = new CrearPaseSalida();
            if(fila >= 0){
                if(tablapase.getValueAt(fila,11).toString().equals("Cancelado")){
                    javax.swing.JOptionPane.showMessageDialog(null, "Pase cancelado,No se puede imprimir");
                }else{
                    try{
                        String[] folio=tablapase.getValueAt(fila,0).toString().split("-");
                        String nombreem=tablapase.getValueAt(fila,1).toString();  
                        String puesto=tablapase.getValueAt(fila,2).toString();
                        String area=tablapase.getValueAt(fila,3).toString();
                        String idarea=manager_pases.getIdResponsableArea(area);
                        String fecha=tablapase.getValueAt(fila,4).toString();
                        String horaes=tablapase.getValueAt(fila,5).toString();
                        String horall=tablapase.getValueAt(fila,6).toString();
                        String horas=tablapase.getValueAt(fila,7).toString();
                        String tipohorario=tablapase.getValueAt(fila,8).toString();
                        String tipoasunto=tablapase.getValueAt(fila,9).toString();
                        String asunto=tablapase.getValueAt(fila,10).toString();

                        responarea=manager_pases.getNomResponsableArea(idarea);
                        String vehiculo=tablapase.getValueAt(fila,12).toString();

                        //javax.swing.JOptionPane.showMessageDialog(null,responarea);

                        //cps.createTicket(1,folio[0],folio[1],nombreem,puesto,area,fecha,horaes,horall,horas,tipohorario,tipoasunto,asunto,responarea);
                        cps.createTicket(1,folio[0],folio[1], nombreem, puesto, area, fecha, horaes, horall, horas, tipohorario, tipoasunto, asunto, responarea,vehiculo);
                    } catch (Exception ex) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Hubo un problema al imprimir el pase");
                        }
                }
            }else{
                 javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar pase");
            }
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para imprimir pases de salida.");
        }
    }//GEN-LAST:event_ImprimirActionPerformed

    private void Hora_llegadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Hora_llegadaActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("actualizar", "Pase Salida", Principal.Username)) {
            int k = tablapase.getSelectedRow();
            if (k >= 0) {
                String[] ho=tablapase.getValueAt(k, 5).toString().split(":");
                int horas=Integer.parseInt(ho[0]);
                int min=Integer.parseInt(ho[1]);
                //javax.swing.JOptionPane.showMessageDialog(null,ho1+" "+ho2);
                String[] matricula=tablapase.getValueAt(k,12).toString().split(" ");
                if(tablapase.getValueAt(k,8).toString().equals("Intermedio")){
                    //javax.swing.JOptionPane.showMessageDialog(null, "Si se puede");
                    String folio = tablapase.getValueAt(k, 0).toString();
                    String[] numfol=folio.split("-");
                     String horallegada="";
                     //int nuevokilo=0;
                     //String nuevaobse="";
                    //javax.swing.JOptionPane.showMessageDialog(null,id);
                    if(tablapase.getValueAt(k,6).toString().isEmpty()){
                        if(tablapase.getValueAt(k,11).toString().equals("Cancelado")){
                           javax.swing.JOptionPane.showMessageDialog(null, "Pase cancelado, no se puede actualizar la hora");
                        }else{
                            if(tablapase.getValueAt(k,12).toString().equals("(Sin vehículo)")){
                                //javax.swing.JOptionPane.showMessageDialog(null, "El pase no lleva vehiculo");
                                try{
                                Statement sentencia = cn.createStatement();
                                Date hora = new Date();
                                SpinnerDateModel sdm = new SpinnerDateModel(hora,null,null,Calendar.HOUR_OF_DAY);
                                JSpinner spinner = new javax.swing.JSpinner(sdm);
                                JSpinner.DateEditor de = new JSpinner.DateEditor(spinner,"HH:mm");
                                spinner.setEditor(de);

                                Object[] boton={"Actualizar","Cancelar"};
   
                                int opcion = JOptionPane.showOptionDialog(this,spinner, "Actualize hora de llegada",
                                JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE  , null, boton,null);
                                
                                if(opcion==0){
                                    SimpleDateFormat format=new SimpleDateFormat("HH:mm");
                                    horallegada = format.format((Date)spinner.getValue());
                                    //JOptionPane.showMessageDialog(this,horallegada);
                                    String[] horasmin = horallegada.split(":");
                                    int horasll = Integer.parseInt(horasmin[0]);
                                    int minll = Integer.parseInt(horasmin[1]);
                                    if(horasll<horas){
                                        javax.swing.JOptionPane.showMessageDialog(null,"La hora de llegada es menor a la hora de Salida");
                                    }else{
                                        sentencia.executeUpdate("UPDATE solicitud_pase SET Hora_Llegada = '" + horallegada + "' , Vehiculo_estado = 'Disponible' WHERE Folio = '" + numfol[0] + "' AND Numero = '" + numfol[1] + "' AND Año = '" + fechag + "';");
                                        //javax.swing.JOptionPane.showMessageDialog(null, horallegada); 
                                        javax.swing.JOptionPane.showMessageDialog(null, "Hora de llegada actualizada");   
                                    }
                                }
                            } catch (SQLException ex) {
                                javax.swing.JOptionPane.showMessageDialog(null, "Error en la actualización");
                                }
                            }else{
                                //javax.swing.JOptionPane.showMessageDialog(null, "el pase lleva vehiculo");
 
                                    Date hora = new Date();
                                    SpinnerDateModel sdm = new SpinnerDateModel(hora,null,null,Calendar.HOUR_OF_DAY);
                                    JSpinner spinner = new javax.swing.JSpinner(sdm);
                                    JSpinner.DateEditor de = new JSpinner.DateEditor(spinner,"HH:mm");
                                    spinner.setEditor(de);
                                    
                                    JDialog dialog = new JDialog();
                                    JPanel panel = new JPanel();
                                    panel.setBounds(60,0,100,60);
                                            
                                    JPanel panel2 = new JPanel();
                                    panel2.setBounds(47,61,140,60); 
        
                                    JPanel panel3 = new JPanel();
                                    panel3.setBounds(19,123,200,150);
        
                                    JPanel panel4 = new JPanel();
                                    panel4.setBounds(80,185,150,150);
        
        
                                    JLabel holl = new JLabel("Hora de llegada:",JLabel.LEFT);
                                    JLabel ki = new JLabel("Kilometraje del vehículo:",JLabel.LEFT);
                                    JTextField textfield = new JTextField(8);
                                    JLabel ob = new JLabel("Observaciones del vehículo:",JLabel.LEFT);
                                    JTextArea textarea = new JTextArea(5,14);
                                    textarea.setLineWrap(true);
                                    textarea.setWrapStyleWord(true);
                                    JButton button = new JButton("Aceptar");
        
                                    panel.add(holl);
                                    panel.add(spinner);
                                    panel2.add(ki);
                                    panel2.add(textfield);
                                    panel3.add(ob);
                                    panel3.add(textarea);
                                    panel3.add(button);
                                    dialog.add(panel);
                                    dialog.add(panel2);
                                    dialog.add(panel3);
                                    dialog.add(panel4);
                                    dialog.pack();
                                    //dialog.setContentPane(panel);
                                    dialog.setTitle("Pase con vehículo "+matricula[0]);
                                    dialog.setSize(250,320);
                                    dialog.setLocationRelativeTo(null);
                                    dialog.setResizable(false);
                                    dialog.setVisible(true);
                                    
                                    button.addActionListener(new ActionListener(){
                                        public void actionPerformed(ActionEvent e) {
                                            SimpleDateFormat format=new SimpleDateFormat("HH:mm");
                                            String horallegada = format.format((Date)spinner.getValue());
                                            //JOptionPane.showMessageDialog(this,horallegada);      
                                            String[] horasmin = horallegada.split(":");
                                            int horasll = Integer.parseInt(horasmin[0]);
                                            int minll = Integer.parseInt(horasmin[1]);
                                            if(horasll<horas){
                                                javax.swing.JOptionPane.showMessageDialog(null,"La hora de llegada es menor a la hora de Salida");
                                            }else{
                                                String nuevokilo = textfield.getText();
                                                String nuevaobse = textarea.getText();
                                                if(nuevokilo.equals("") || nuevaobse.equals("")){
                                                    JOptionPane.showMessageDialog(dialog,"Introduce el kilometraje y/o las observaciones"); 
                                                }else{
                                                    try{
                                                        Statement sentencia = cn.createStatement();
                                                        ResultSet rs=cbd.getTabla("select * from vehiculos where matricula='"+matricula[0]+"'",cn);
                                                        rs.next();
                                                        String actualkilo = rs.getString("Kilometraje");
                                                        if(Integer.parseInt(nuevokilo) < Integer.parseInt(actualkilo)){
                                                            javax.swing.JOptionPane.showMessageDialog(null, "El kilometraje debe de ser mayor al kilometraje actual");                                
                                                        }else{
                                                            String observaciones=rs.getString("Observaciones")+"\n------------------\n"+nuevaobse;
                                                            sentencia.executeUpdate("UPDATE solicitud_pase SET Hora_Llegada = '" + horallegada + "' , Vehiculo_estado = 'Disponible' WHERE Folio = '" + numfol[0] + "' AND Numero = '" + numfol[1] + "' AND Año = '" + fechag + "';");
                                                            sentencia.executeUpdate("UPDATE vehiculos SET kilometraje='"+nuevokilo+"',Observaciones='"+observaciones+"' where matricula='"+matricula[0]+"'");
                                                            //sentencia.executeUpdate("UPDATE vehiculos SET observaciones='"+observaciones+"' where matricula='"+matricula+"'");
                                                            //javax.swing.JOptionPane.showMessageDialog(null, horallegada); 
                                                            javax.swing.JOptionPane.showMessageDialog(null, "Hora de llegada actualizada");
                                                            dialog.setVisible(false); 
                                                        }
                                                    }catch(SQLException ex){
                                                        javax.swing.JOptionPane.showMessageDialog(null, "Error en la actualización");  
                                                    }
                                                }
                                            }
                                        }
                                    });
                                
                            }
                        /*try {
                    Statement sentencia = cn.createStatement();
                    Date hora = new Date();
                    SpinnerDateModel sdm = new SpinnerDateModel(hora,null,null,Calendar.HOUR_OF_DAY);
                    JSpinner spinner = new javax.swing.JSpinner(sdm);
                    JSpinner.DateEditor de = new JSpinner.DateEditor(spinner,"HH:mm");
                    spinner.setEditor(de);

                    Object[] boton={"Actualizar","Cancelar"};
   
                    int opcion = JOptionPane.showOptionDialog(this,spinner, "Mostrando Spinner",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE  , null, boton,null);
                    
                    if(opcion==0){
                        SimpleDateFormat format=new SimpleDateFormat("HH:mm");
                        horallegada = format.format((Date)spinner.getValue());
                        //JOptionPane.showMessageDialog(this,horallegada);
                        String[] horasmin = horallegada.split(":");
                        int horasll = Integer.parseInt(horasmin[0]);
                        int minll = Integer.parseInt(horasmin[1]);
                        if(horasll<horas){
                               javax.swing.JOptionPane.showMessageDialog(null,"La hora de llegada es menor a la hora de Salida");
                        }else{
                            ResultSet rs=cbd.getTabla("select * from vehiculos where matricula='"+matricula[0]+"'",cn);
                            rs.next();
                            String actualkilo = rs.getString("Kilometraje");
                            String nuevokilo = javax.swing.JOptionPane.showInputDialog("Introduce el nuevo kilometraje:");
                            if(nuevokilo.equals("")){
                               javax.swing.JOptionPane.showMessageDialog(null, "Introduce el kilometraje");  
                            }
                            else if(Integer.parseInt(nuevokilo) < Integer.parseInt(actualkilo)){
                                javax.swing.JOptionPane.showMessageDialog(null, "El kilometraje debe de ser mayor al kilometraje actual");                                
                            }
                            else{
                                String obse = javax.swing.JOptionPane.showInputDialog("Introduce nuevas observaciones:");
                                if(obse.equals("")){
                                    javax.swing.JOptionPane.showMessageDialog(null, "Introduce las observaciones");                                   
                                }else{
                                 String observaciones=rs.getString("Observaciones")+"\n------------------\n"+obse;
                                //actualizamos la hora de llegada
                                sentencia.executeUpdate("UPDATE solicitud_pase SET Hora_Llegada = '" + horallegada + "' , Vehiculo_estado = 'Disponible' WHERE Folio = '" + numfol[0] + "' AND Numero = '" + numfol[1] + "' AND Año = '" + fechag + "';");
                                sentencia.executeUpdate("UPDATE vehiculos SET kilometraje='"+nuevokilo+"',Observaciones='"+observaciones+"' where matricula='"+matricula[0]+"'");
                                //sentencia.executeUpdate("UPDATE vehiculos SET observaciones='"+observaciones+"' where matricula='"+matricula+"'");
                                //javax.swing.JOptionPane.showMessageDialog(null, horallegada); 
                                javax.swing.JOptionPane.showMessageDialog(null, "Hora de llegada actualizada");   
                                } 
                            }
                            //sentencia.executeUpdate("UPDATE solicitud_pase SET Hora_Llegada = '" + horallegada + "' , Vehiculo_estado = 'Disponible' WHERE Folio = '" + numfol[0] + "' AND Numero = '" + numfol[1] + "' AND Año = '" + fechag + "';");
                            //javax.swing.JOptionPane.showMessageDialog(null, horallegada); 
                            //javax.swing.JOptionPane.showMessageDialog(null, "Hora de llegada actualizada");                            
                        }
                    }
                } catch (SQLException ex) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Error en la actualización");
                }*/
                        }
                    }else{
                       javax.swing.JOptionPane.showMessageDialog(null, "La hora ya fue actualizada");
                       /*javax.swing.JOptionPane.showMessageDialog(null,matricula[0]);
                       try{
                           ResultSet rs=cbd.getTabla("select * from vehiculos where matricula='"+matricula[0]+"'",cn);
                           rs.next();
                           String kilo=rs.getString("Kilometraje");
                           String obse=rs.getString("Observaciones");
                           javax.swing.JOptionPane.showMessageDialog(null,kilo);
                           javax.swing.JOptionPane.showMessageDialog(null,obse);
                       } catch (SQLException ex) {
                            javax.swing.JOptionPane.showMessageDialog(null, "Error");
                        }*/
                       
                    }
            } else {
                    javax.swing.JOptionPane.showMessageDialog(null, "No se puede actualizar hora de llegada");
            }
                tablapase.setModel(manager_pases.getTasolpa(fechag));                
                }else{
                    javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar pase");                
                }
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para actualizar la hora de llegada.");
        }
    }//GEN-LAST:event_Hora_llegadaActionPerformed

    private void CancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("baja", "Pase Salida", Principal.Username)) {
            int k = tablapase.getSelectedRow();
            if (k >= 0) {
                String cance= tablapase.getValueAt(k, 11).toString();
                String holle=tablapase.getValueAt(k, 6).toString();
                String folio = tablapase.getValueAt(k, 0).toString();
                String[] numfol=folio.split("-");
                if(cance.equals("Cancelado")){
                    javax.swing.JOptionPane.showMessageDialog(null, "Pase ya fue cancelado");
                }
                else if(!holle.isEmpty()){
                   javax.swing.JOptionPane.showMessageDialog(null, "No se puede cancelar"); 
                }
                else{
                    try {
                        Statement sentencia = cn.createStatement();
                        sentencia.executeUpdate("UPDATE solicitud_pase SET Estado = 'Cancelado', Vehiculo_estado = 'Disponible' WHERE Folio = '" + numfol[0] + "' AND Numero = '" + numfol[1] + "' AND Año = '" + fechag + "';");
                        javax.swing.JOptionPane.showMessageDialog(null, "Pase cancelado");
                    } catch (SQLException ex) {
                        javax.swing.JOptionPane.showMessageDialog(null, "Error al cancelar");
                    } 
                }
                   
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar pase");
            }
            tablapase.setModel(manager_pases.getTasolpa(fechag)); 
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para cancelar pases de salida.");
        }
    }//GEN-LAST:event_CancelarActionPerformed

    private void ExportarExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportarExcelActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("consulta", "Pase Salida", Principal.Username)) {
            try{
                //if(manager_permisos.accesoModulo("consulta","Inventario",Username)){
                    Excel excel = new Excel();
                    excel.GuardarComo(tablapase);
                //}else{
                    //JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para realizar consultas en el inventario.");
                    //tablapase.setModel(new DefaultTableModel());
                //}
            }catch(NullPointerException e){

            }
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para exportar pases de salida.");
        }
    }//GEN-LAST:event_ExportarExcelActionPerformed

    private void ConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsultarActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("consulta", "Pase Salida", Principal.Username)) {
            int fila = tablapase.getSelectedRow();
            if (fila >= 0) {
                 
                String folio=tablapase.getValueAt(fila,0).toString();
                String nombreem=tablapase.getValueAt(fila,1).toString();  
                String puesto=tablapase.getValueAt(fila,2).toString();
                String area=tablapase.getValueAt(fila,3).toString();
                String fecha=tablapase.getValueAt(fila,4).toString();
                String horaes=tablapase.getValueAt(fila,5).toString();
                String horall=tablapase.getValueAt(fila,6).toString();
                String horas=tablapase.getValueAt(fila,7).toString();
                String tipohorario=tablapase.getValueAt(fila,8).toString();
                String tipoasunto=tablapase.getValueAt(fila,9).toString();
                String asunto=tablapase.getValueAt(fila,10).toString();
                String estado=tablapase.getValueAt(fila,11).toString();
                String vehiculo=tablapase.getValueAt(fila,12).toString();
                
                vsp = new visSolicitudPase(this,true,folio);
                
                vsp.recibeinfo(folio,nombreem,puesto,area,fecha,horaes,horall,horas,tipohorario,tipoasunto,asunto,estado,vehiculo);

                vsp.setVisible(true); 
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar pase");
            }
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para consultar pases de salida.");
        }
    }//GEN-LAST:event_ConsultarActionPerformed

    private void mi_viaticosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_viaticosActionPerformed

        PrincipalS a= new PrincipalS();
        a.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_mi_viaticosActionPerformed

    private void mi_pasesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_pasesActionPerformed
        // TODO add your handling code here:
        try {
            Principal a = new Principal();
            a.setVisible(true);
            //this.dispose();
            this.setVisible(false);
        } catch (ClassNotFoundException | SQLException | IOException ex) {
            Logger.getLogger(PrincipalP.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mi_pasesActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        Object[] botones = {"Confirmar","Cerrar Sesión","Cancelar"};
        int opcion = JOptionPane.showOptionDialog(this,"¿Salir del Sistema?", "Confirmación",
                JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE  , null, botones, botones[0]);
        
        if(opcion == 0){
            
            System.exit(0);
        }else if(opcion == 1){
            //Cerrar sesion
            this.dispose();
            Login ob = new Login();
            ob.setVisible(true);   
        }
    }//GEN-LAST:event_formWindowClosing

    private void comboAñoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboAñoActionPerformed
        // TODO add your handling code here:
        int a = comboAño.getSelectedIndex();
        if(a>=0){
            String vayear=comboAño.getSelectedItem().toString();
            tablapase.setModel(manager_pases.getTasolpa(vayear));    
        }else{
            System.out.printf("ERROR!! en la consulta (año)");
        }
    }//GEN-LAST:event_comboAñoActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:

        Object[] botones = {"Confirmar", "Cancelar"};
        int opcion = JOptionPane.showOptionDialog(this, "¿Desea cerrar sesión?", "Confirmación",
            JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, botones, botones[0]);

        if (opcion == 0) {
            this.dispose();
            Login ob = new Login();
            ob.setVisible(true);
        } else if (opcion == 1) {
            // No hacer nada
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void itemSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSalirActionPerformed
        // TODO add your handling code here:
        Object[] botones = {"Confirmar","Cancelar"};
        int opcion = JOptionPane.showOptionDialog(this,"¿Salir del Sistema?", "Confirmación",
            JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, botones, botones[0]);

        if(opcion == 0){
            System.exit(0);
        }else if(opcion == 1){
            //Cerrar sesion
        }
    }//GEN-LAST:event_itemSalirActionPerformed

    private void CambiarvehiculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CambiarvehiculoActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("actualizar", "Pase Salida", Principal.Username)) {
            int k = tablapase.getSelectedRow();
            if (k >= 0) {
                if(tablapase.getValueAt(k,8).toString().equals("Intermedio")){
                     String folio = tablapase.getValueAt(k, 0).toString();
                    String[] numfol=folio.split("-");
                    if(tablapase.getValueAt(k,6).toString().isEmpty()){
                        if(tablapase.getValueAt(k,11).toString().equals("Cancelado")){
                           javax.swing.JOptionPane.showMessageDialog(null, "Pase cancelado, no se puede cambiar el vehículo");
                        }else{
                            try {
                                Statement sentencia = cn.createStatement();
                                
                                JComboBox jcb = new JComboBox();
                                jcb.addItem("(Sin vehículo)"); 
                                manager_pases.getVehiculos(jcb);
                                Object[] boton={"Actualizar","Cancelar"};
                                
                                int opcion = JOptionPane.showOptionDialog(this,jcb, "Seleccione vehículo",
                                    JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE  , null, boton,null);
                                
                                if(opcion==0){
                                    String vehiculo = jcb.getSelectedItem().toString();
                                    javax.swing.JOptionPane.showMessageDialog(null, vehiculo); 
                                    sentencia.executeUpdate("UPDATE solicitud_pase SET Vehiculo_pase = '" + vehiculo + "' WHERE Folio = '" + numfol[0] + "' AND Numero = '" + numfol[1] + "' AND Año = '" + fechag + "';");
                                    //javax.swing.JOptionPane.showMessageDialog(null, horallegada); 
                                    javax.swing.JOptionPane.showMessageDialog(null, "Se cambio el vehículo");  
                                }                   
                            
                            } catch (SQLException ex) {
                                javax.swing.JOptionPane.showMessageDialog(null, "Error al cambiar el vehículo");
                             }                  
                            
                        }
                        
                    }else{
                       javax.swing.JOptionPane.showMessageDialog(null, "No se puede cambiar el vehículo\n"+"el pase ya fue realizado"); 
                    }
                    
                }else{
                   javax.swing.JOptionPane.showMessageDialog(null, "No se puede cambiar el vehículo"); 
                }
                
            }else{
               javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar pase"); 
            }
            
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para actualizar el vehículo.");        
        }
    }//GEN-LAST:event_CambiarvehiculoActionPerformed
    //obtenemos las fecha del sistema    
    public static String getfecha(){
        Date fecha=new Date(); 
        SimpleDateFormat formatofecha=new SimpleDateFormat("dd-MM-yyyy");
        String[] sepfe=formatofecha.format(fecha).split("-");
        return sepfe[2];
        }
        //insetar el año actual sino existe
        public void inseryear(String year){
            Conexion conexion=new Conexion();
            conexion.getConexion();
            boolean insersion=conexion.ejecutar("INSERT INTO acceder_year (Year)\n" +
                                                "SELECT '"+ year +"' \n" +
                                                "FROM dual\n" +
                                                "WHERE NOT EXISTS (select Year from acceder_year where Year= '"+year+"' )LIMIT 1;");
            if(insersion){
                return ;
            }else{
                return ;
            }
            
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrincipalP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrincipalP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrincipalP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrincipalP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        SubstanceLookAndFeel.setSkin("org.jvnet.substance.skin.OfficeSilver2007Skin");
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrincipalP().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Cambiarvehiculo;
    private javax.swing.JMenuItem Cancelar;
    private javax.swing.JMenuItem Consultar;
    private javax.swing.JMenuItem ExportarExcel;
    private javax.swing.JMenuItem Hora_llegada;
    private javax.swing.JMenuItem Imprimir;
    private javax.swing.JPopupMenu MenuPases;
    private javax.swing.JMenuItem Nueva;
    private javax.swing.JComboBox<String> comboAño;
    private javax.swing.JMenuItem itemSalir;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenu menuInterfaces;
    private javax.swing.JMenuItem mi_pases;
    private javax.swing.JMenuItem mi_viaticos;
    private javax.swing.JPanel solicitudviaticos1;
    public static javax.swing.JTabbedPane solicpase;
    public static javax.swing.JTable tablapase;
    private javax.swing.JTextField txtbusquedasoli;
    // End of variables declaration//GEN-END:variables
}
