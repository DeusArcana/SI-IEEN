/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import Clases.Conexion;
import javax.swing.JOptionPane;

import Clases.ManagerSoViaticos;
import Clases.CrearPDF;
import Clases.ManagerPermisos;
import Formularios.addSolicitudVehiculo;

import Formularios.addSolicitudViaticos;
import Formularios.addViaticoVehiculo;
import Formularios.visSolicitudViaticos;
import static Interfaces.Principal.Username;
import static Interfaces.Principal.tablaInventario;
import static Interfaces.Principal.tablaUsuarios;
import com.itextpdf.text.DocumentException;
import java.awt.Frame;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author usuario
 */
public class PrincipalS extends javax.swing.JFrame {
    Conexion cbd = new Conexion();
    Connection cn = cbd.getConexion();
    ManagerSoViaticos manager_soviaticos;
    ManagerPermisos manager_permisos;
    visSolicitudViaticos s;
    DefaultTableModel modelo;
    CrearPDF pdf = new CrearPDF();
    boolean limpiar = false;
    public static int conVehiculo;//Sirve para saber si se tiene que solicitar un vehiculo cuando está en 1

    /**
     * Creates new form PrincipalS
     */
    public PrincipalS() {
        this.setTitle("Movimientos de viáticos");
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        setLocationRelativeTo(null);
        //tablasolic.setModel(manager_soviaticos.getTasol()); 
        tablasolic.getTableHeader().setReorderingAllowed(false);
        tablonpendientes.getTableHeader().setReorderingAllowed(false);
        tablonaceptadas.getTableHeader().setReorderingAllowed(false);
        tabloncanceladas.getTableHeader().setReorderingAllowed(false);
        tablonarchivadas.getTableHeader().setReorderingAllowed(false);
        manager_soviaticos = new ManagerSoViaticos();
        manager_permisos=new ManagerPermisos();
        c = 0;
    }

    int folio, c;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel17 = new javax.swing.JPanel();
        btnAddInventario2 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        MenuSolicitudViaticos = new javax.swing.JPopupMenu();
        Impri_Sol = new javax.swing.JMenuItem();
        Add = new javax.swing.JMenuItem();
        SolicitarVehiculo = new javax.swing.JMenuItem();
        AgregarEmpleados = new javax.swing.JMenuItem();
        CambiarConsejero = new javax.swing.JMenuItem();
        MenuTablonP = new javax.swing.JPopupMenu();
        ConsultarP = new javax.swing.JMenuItem();
        AceptarP = new javax.swing.JMenuItem();
        CancelarP = new javax.swing.JMenuItem();
        MenuTablonA = new javax.swing.JPopupMenu();
        ConsultarA = new javax.swing.JMenuItem();
        OficioComision = new javax.swing.JMenuItem();
        AsignarMonto = new javax.swing.JMenuItem();
        CancelarA = new javax.swing.JMenuItem();
        Archivar = new javax.swing.JMenuItem();
        MenuTablonC = new javax.swing.JPopupMenu();
        ConsultarC = new javax.swing.JMenuItem();
        AceptarC = new javax.swing.JMenuItem();
        MenuPanelSolicitudViatico = new javax.swing.JPopupMenu();
        Add1 = new javax.swing.JMenuItem();
        SolicitarVehiculo1 = new javax.swing.JMenuItem();
        CambiarConsejero1 = new javax.swing.JMenuItem();
        MenuInfSA = new javax.swing.JPopupMenu();
        GenerarInf = new javax.swing.JMenuItem();
        MenuInfSF = new javax.swing.JPopupMenu();
        ConsultarInf = new javax.swing.JMenuItem();
        MenuGI = new javax.swing.JPopupMenu();
        AñadirA = new javax.swing.JMenuItem();
        EliminarA = new javax.swing.JMenuItem();
        MenuTablonAr = new javax.swing.JPopupMenu();
        ConsultarAr = new javax.swing.JMenuItem();
        OficioComisionAr = new javax.swing.JMenuItem();
        OficioViaticoAr = new javax.swing.JMenuItem();
        MenuSolicitudViaticos1 = new javax.swing.JPopupMenu();
        Impri_Sol1 = new javax.swing.JMenuItem();
        Add2 = new javax.swing.JMenuItem();
        SolicitarVehiculo2 = new javax.swing.JMenuItem();
        CambiarConsejero2 = new javax.swing.JMenuItem();
        solicviaticos = new javax.swing.JTabbedPane();
        solicitudviaticos1 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane11 = new javax.swing.JScrollPane();
        tablasolic = new JTable(){  public boolean isCellEditable(int rowIndex, int colIndex){  return false;  }  };
        jScrollPane12 = new javax.swing.JScrollPane();
        tablasolicvehiculo = new JTable(){  public boolean isCellEditable(int rowIndex, int colIndex){  return false;  }  };
        jLabel17 = new javax.swing.JLabel();
        txtbusquedasoli = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        tablonsolicitud1 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        guardargac = new javax.swing.JButton();
        txtbusquedasoli1 = new javax.swing.JTextField();
        jPanel20 = new javax.swing.JPanel();
        menutablones = new javax.swing.JTabbedPane();
        solipendientes = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        tablonpendientes = new JTable(){  public boolean isCellEditable(int rowIndex, int colIndex){  return false;  }  };
        soliaceptadas = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        tablonaceptadas = new JTable(){  public boolean isCellEditable(int rowIndex, int colIndex){  return false;  }  };
        solicarchivadas = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablonarchivadas = new javax.swing.JTable();
        solicanceladas = new javax.swing.JPanel();
        jPanel26 = new javax.swing.JPanel();
        jScrollPane16 = new javax.swing.JScrollPane();
        tabloncanceladas = new JTable(){  public boolean isCellEditable(int rowIndex, int colIndex){  return false;  }  };
        jLabel28 = new javax.swing.JLabel();
        informe = new javax.swing.JPanel();
        jlb = new javax.swing.JLabel();
        txtbusquedasoli2 = new javax.swing.JTextField();
        jPanel21 = new javax.swing.JPanel();
        menuInforme = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablainfo = new javax.swing.JTable();
        txtobvia = new javax.swing.JTextArea();
        txtobveh = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        lblObsVehiculo = new javax.swing.JLabel();
        GaTot = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnguardar = new javax.swing.JButton();
        btnregresar1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaact = new javax.swing.JTable();
        txtKilometraje = new javax.swing.JTextField();
        lblKilometraje = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablainfo1 = new javax.swing.JTable();
        btnregresar = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        itemAnterior = new javax.swing.JMenuItem();
        itemSiguiente = new javax.swing.JMenuItem();
        mi_inventario = new javax.swing.JMenuItem();
        mi_pases = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        itemSalir = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuOpciones = new javax.swing.JMenu();
        menuPermisos = new javax.swing.JMenuItem();
        menuPuestoArea = new javax.swing.JMenuItem();
        MenuSolicitud = new javax.swing.JMenuItem();

        jPanel17.setBackground(new java.awt.Color(255, 255, 255));
        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Opciones :", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI", 0, 12))); // NOI18N

        btnAddInventario2.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        btnAddInventario2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/agregar.png"))); // NOI18N
        btnAddInventario2.setText("Nueva solicitud");
        btnAddInventario2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnAddInventario2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddInventario2ActionPerformed(evt);
            }
        });

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/IEE.png"))); // NOI18N

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addComponent(btnAddInventario2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(btnAddInventario2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(339, Short.MAX_VALUE))
        );

        Impri_Sol.setText("Imprimir solicitud");
        Impri_Sol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Impri_SolActionPerformed(evt);
            }
        });
        MenuSolicitudViaticos.add(Impri_Sol);

        Add.setText("Solicitud de viático");
        Add.setActionCommand("Solicitud viático");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });
        MenuSolicitudViaticos.add(Add);

        SolicitarVehiculo.setText("Solicitar Vehiculo");
        SolicitarVehiculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SolicitarVehiculoActionPerformed(evt);
            }
        });
        MenuSolicitudViaticos.add(SolicitarVehiculo);

        AgregarEmpleados.setText("Agregar empleados al vehiculo");
        AgregarEmpleados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarEmpleadosActionPerformed(evt);
            }
        });
        MenuSolicitudViaticos.add(AgregarEmpleados);

        CambiarConsejero.setText("Cambiar Consejero Presidente");
        CambiarConsejero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CambiarConsejeroActionPerformed(evt);
            }
        });
        MenuSolicitudViaticos.add(CambiarConsejero);

        ConsultarP.setText("Consultar");
        ConsultarP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsultarPActionPerformed(evt);
            }
        });
        MenuTablonP.add(ConsultarP);

        AceptarP.setText("Aceptar");
        AceptarP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AceptarPActionPerformed(evt);
            }
        });
        MenuTablonP.add(AceptarP);

        CancelarP.setText("Cancelar");
        CancelarP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarPActionPerformed(evt);
            }
        });
        MenuTablonP.add(CancelarP);

        ConsultarA.setText("Consultar");
        ConsultarA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsultarAActionPerformed(evt);
            }
        });
        MenuTablonA.add(ConsultarA);

        OficioComision.setText("Oficio de comisión");
        OficioComision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OficioComisionActionPerformed(evt);
            }
        });
        MenuTablonA.add(OficioComision);

        AsignarMonto.setText("Modificar monto");
        AsignarMonto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AsignarMontoActionPerformed(evt);
            }
        });
        MenuTablonA.add(AsignarMonto);

        CancelarA.setText("Cancelar");
        CancelarA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarAActionPerformed(evt);
            }
        });
        MenuTablonA.add(CancelarA);

        Archivar.setText("Archivar");
        Archivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArchivarActionPerformed(evt);
            }
        });
        MenuTablonA.add(Archivar);

        ConsultarC.setText("Consultar");
        ConsultarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsultarCActionPerformed(evt);
            }
        });
        MenuTablonC.add(ConsultarC);

        AceptarC.setText("Aceptar");
        AceptarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AceptarCActionPerformed(evt);
            }
        });
        MenuTablonC.add(AceptarC);

        Add1.setText("Solicitud viático");
        Add1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add1ActionPerformed(evt);
            }
        });
        MenuPanelSolicitudViatico.add(Add1);

        SolicitarVehiculo1.setText("Solicitar Vehiculo");
        SolicitarVehiculo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SolicitarVehiculo1ActionPerformed(evt);
            }
        });
        MenuPanelSolicitudViatico.add(SolicitarVehiculo1);

        CambiarConsejero1.setText("Cambiar Consejero Presidente");
        CambiarConsejero1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CambiarConsejero1ActionPerformed(evt);
            }
        });
        MenuPanelSolicitudViatico.add(CambiarConsejero1);

        GenerarInf.setText("Generar informe");
        GenerarInf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerarInfActionPerformed(evt);
            }
        });
        MenuInfSA.add(GenerarInf);

        ConsultarInf.setText("Consultar");
        ConsultarInf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsultarInfActionPerformed(evt);
            }
        });
        MenuInfSF.add(ConsultarInf);
        ConsultarInf.getAccessibleContext().setAccessibleName("Consultar informe");

        AñadirA.setText("Añadir actividad");
        AñadirA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AñadirAActionPerformed(evt);
            }
        });
        MenuGI.add(AñadirA);

        EliminarA.setText("Eliminar actividad");
        EliminarA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarAActionPerformed(evt);
            }
        });
        MenuGI.add(EliminarA);

        ConsultarAr.setText("Consultar");
        ConsultarAr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsultarArActionPerformed(evt);
            }
        });
        MenuTablonAr.add(ConsultarAr);

        OficioComisionAr.setText("Oficio de comisión");
        OficioComisionAr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OficioComisionArActionPerformed(evt);
            }
        });
        MenuTablonAr.add(OficioComisionAr);

        OficioViaticoAr.setText("Oficio de viático");
        OficioViaticoAr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OficioViaticoArActionPerformed(evt);
            }
        });
        MenuTablonAr.add(OficioViaticoAr);

        Impri_Sol1.setText("Imprimir solicitud");
        Impri_Sol1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Impri_Sol1ActionPerformed(evt);
            }
        });
        MenuSolicitudViaticos1.add(Impri_Sol1);

        Add2.setText("Solicitud de viático");
        Add2.setActionCommand("Solicitud viático");
        Add2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add2ActionPerformed(evt);
            }
        });
        MenuSolicitudViaticos1.add(Add2);

        SolicitarVehiculo2.setText("Solicitar Vehiculo");
        SolicitarVehiculo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SolicitarVehiculo2ActionPerformed(evt);
            }
        });
        MenuSolicitudViaticos1.add(SolicitarVehiculo2);

        CambiarConsejero2.setText("Cambiar Consejero Presidente");
        CambiarConsejero2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CambiarConsejero2ActionPerformed(evt);
            }
        });
        MenuSolicitudViaticos1.add(CambiarConsejero2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconImage(getIconImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        solicviaticos.setBackground(new java.awt.Color(255, 204, 204));
        solicviaticos.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        solicitudviaticos1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                solicitudviaticos1MouseReleased(evt);
            }
        });
        solicitudviaticos1.setLayout(null);

        jPanel16.setBackground(java.awt.Color.white);

        jScrollPane11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jScrollPane11MouseReleased(evt);
            }
        });

        tablasolic.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Puesto", "Fecha_salida", "Fecha_llegada", "Lugar"
            }
        ));
        tablasolic.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablasolicMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tablasolicMouseReleased(evt);
            }
        });
        jScrollPane11.setViewportView(tablasolic);

        jTabbedPane1.addTab("Solicitud de viáticos", new javax.swing.ImageIcon(getClass().getResource("/Iconos/solicitud.png")), jScrollPane11); // NOI18N

        jScrollPane12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jScrollPane12MouseReleased(evt);
            }
        });

        tablasolicvehiculo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Puesto", "Fecha_salida", "Fecha_llegada", "Lugar"
            }
        ));
        tablasolicvehiculo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tablasolicvehiculoMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablasolicvehiculoMouseClicked(evt);
            }
        });
        jScrollPane12.setViewportView(tablasolicvehiculo);

        jTabbedPane1.addTab("Solicitud de vehículos", new javax.swing.ImageIcon(getClass().getResource("/Iconos/solicitud.png")), jScrollPane12); // NOI18N

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
        );

        solicitudviaticos1.add(jPanel16);
        jPanel16.setBounds(20, 170, 1300, 410);

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel17.setText("Búsqueda:");
        solicitudviaticos1.add(jLabel17);
        jLabel17.setBounds(40, 120, 100, 22);

        txtbusquedasoli.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtbusquedasoli.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtbusquedasoliKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtbusquedasoliKeyReleased(evt);
            }
        });
        solicitudviaticos1.add(txtbusquedasoli);
        txtbusquedasoli.setBounds(130, 120, 290, 30);

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/IEE.png"))); // NOI18N
        solicitudviaticos1.add(jLabel9);
        jLabel9.setBounds(150, 20, 190, 84);
        solicitudviaticos1.add(jLabel18);
        jLabel18.setBounds(10, 10, 1350, 80);

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fondo.png"))); // NOI18N
        solicitudviaticos1.add(jLabel19);
        jLabel19.setBounds(0, 0, 1367, 769);

        solicviaticos.addTab("Solicitud de Viáticos", new javax.swing.ImageIcon(getClass().getResource("/Iconos/solicitud.png")), solicitudviaticos1); // NOI18N

        tablonsolicitud1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tablonsolicitud1FocusLost(evt);
            }
        });
        tablonsolicitud1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tablonsolicitud1MouseReleased(evt);
            }
        });
        tablonsolicitud1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tablonsolicitud1KeyPressed(evt);
            }
        });
        tablonsolicitud1.setLayout(null);

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel20.setText("Búsqueda:");
        tablonsolicitud1.add(jLabel20);
        jLabel20.setBounds(70, 50, 100, 22);

        guardargac.setText("Guardar");
        guardargac.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                guardargacFocusLost(evt);
            }
        });
        guardargac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardargacActionPerformed(evt);
            }
        });
        tablonsolicitud1.add(guardargac);
        guardargac.setBounds(910, 60, 120, 30);

        txtbusquedasoli1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtbusquedasoli1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtbusquedasoli1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtbusquedasoli1KeyReleased(evt);
            }
        });
        tablonsolicitud1.add(txtbusquedasoli1);
        txtbusquedasoli1.setBounds(170, 50, 290, 30);

        solipendientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                solipendientesMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                solipendientesMouseReleased(evt);
            }
        });
        solipendientes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                solipendientesKeyPressed(evt);
            }
        });
        solipendientes.setLayout(null);

        tablonpendientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Puesto", "Fecha_salida", "Fecha_llegada", "Lugar"
            }
        ));
        tablonpendientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tablonpendientesMouseReleased(evt);
            }
        });
        jScrollPane13.setViewportView(tablonpendientes);

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 1308, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 43, Short.MAX_VALUE))
        );

        solipendientes.add(jPanel23);
        jPanel23.setBounds(0, 0, 1320, 530);

        menutablones.addTab("Solicitudes Pendientes", new javax.swing.ImageIcon(getClass().getResource("/Iconos/solicitud.png")), solipendientes); // NOI18N

        soliaceptadas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                soliaceptadasMouseReleased(evt);
            }
        });
        soliaceptadas.setLayout(null);

        tablonaceptadas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Folio", "Monto", "Fecha_salida", "Fecha_llegada", "Lugar"
            }
        ));
        tablonaceptadas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tablonaceptadasMouseReleased(evt);
            }
        });
        jScrollPane14.setViewportView(tablonaceptadas);

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 1308, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 43, Short.MAX_VALUE))
        );

        soliaceptadas.add(jPanel24);
        jPanel24.setBounds(0, 0, 1320, 530);

        menutablones.addTab("Solicitudes Aceptadas", new javax.swing.ImageIcon(getClass().getResource("/Iconos/solicitud.png")), soliaceptadas); // NOI18N

        solicarchivadas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                solicarchivadasMouseReleased(evt);
            }
        });
        solicarchivadas.setLayout(null);

        jScrollPane4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jScrollPane4MouseReleased(evt);
            }
        });

        tablonarchivadas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tablonarchivadas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tablonarchivadasMouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(tablonarchivadas);

        javax.swing.GroupLayout jPanel25Layout = new javax.swing.GroupLayout(jPanel25);
        jPanel25.setLayout(jPanel25Layout);
        jPanel25Layout.setHorizontalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1320, Short.MAX_VALUE)
        );
        jPanel25Layout.setVerticalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 45, Short.MAX_VALUE))
        );

        solicarchivadas.add(jPanel25);
        jPanel25.setBounds(0, 0, 1320, 530);

        menutablones.addTab("Solicitudes Archivadas", new javax.swing.ImageIcon(getClass().getResource("/Iconos/solicitud.png")), solicarchivadas); // NOI18N

        solicanceladas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                solicanceladasMouseReleased(evt);
            }
        });
        solicanceladas.setLayout(null);

        tabloncanceladas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Puesto", "Fecha_salida", "Fecha_llegada", "Lugar"
            }
        ));
        tabloncanceladas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tabloncanceladasMouseReleased(evt);
            }
        });
        jScrollPane16.setViewportView(tabloncanceladas);

        javax.swing.GroupLayout jPanel26Layout = new javax.swing.GroupLayout(jPanel26);
        jPanel26.setLayout(jPanel26Layout);
        jPanel26Layout.setHorizontalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane16, javax.swing.GroupLayout.DEFAULT_SIZE, 1320, Short.MAX_VALUE)
        );
        jPanel26Layout.setVerticalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel26Layout.createSequentialGroup()
                .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 46, Short.MAX_VALUE))
        );

        solicanceladas.add(jPanel26);
        jPanel26.setBounds(0, 0, 1320, 530);

        menutablones.addTab("Solicitudes Canceladas", new javax.swing.ImageIcon(getClass().getResource("/Iconos/solicitud.png")), solicanceladas); // NOI18N

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(menutablones, javax.swing.GroupLayout.DEFAULT_SIZE, 1320, Short.MAX_VALUE)
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(menutablones, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
        );

        tablonsolicitud1.add(jPanel20);
        jPanel20.setBounds(20, 110, 1320, 530);

        jLabel28.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fondo.png"))); // NOI18N
        tablonsolicitud1.add(jLabel28);
        jLabel28.setBounds(0, 0, 1367, 769);

        solicviaticos.addTab("Tablón de Solicitudes", new javax.swing.ImageIcon(getClass().getResource("/Iconos/solicitud.png")), tablonsolicitud1); // NOI18N

        informe.setLayout(null);

        jlb.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jlb.setText("Búsqueda:");
        informe.add(jlb);
        jlb.setBounds(40, 40, 100, 22);

        txtbusquedasoli2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtbusquedasoli2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtbusquedasoli2KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtbusquedasoli2KeyReleased(evt);
            }
        });
        informe.add(txtbusquedasoli2);
        txtbusquedasoli2.setBounds(140, 30, 290, 30);

        jPanel21.setLayout(null);

        jPanel1.setLayout(null);

        tablainfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tablainfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tablainfoMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tablainfo);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(0, 0, 1310, 480);

        txtobvia.setColumns(20);
        txtobvia.setRows(5);
        jPanel1.add(txtobvia);
        txtobvia.setBounds(480, 90, 800, 220);

        txtobveh.setColumns(20);
        txtobveh.setRows(5);
        jPanel1.add(txtobveh);
        txtobveh.setBounds(480, 350, 800, 110);

        jLabel1.setText("Observaciones Viaticos");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(810, 60, 150, 20);

        lblObsVehiculo.setText("Observaciones Vehículo");
        jPanel1.add(lblObsVehiculo);
        lblObsVehiculo.setBounds(810, 320, 150, 14);
        jPanel1.add(GaTot);
        GaTot.setBounds(210, 440, 240, 20);

        jLabel3.setText("Gasto total");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(140, 440, 70, 14);

        btnguardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/guardarsol.png"))); // NOI18N
        btnguardar.setText("Guardar");
        btnguardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnguardarActionPerformed(evt);
            }
        });
        jPanel1.add(btnguardar);
        btnguardar.setBounds(1020, 20, 120, 40);

        btnregresar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/atras.png"))); // NOI18N
        btnregresar1.setText("Regresar");
        btnregresar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnregresar1ActionPerformed(evt);
            }
        });
        jPanel1.add(btnregresar1);
        btnregresar1.setBounds(1180, 20, 100, 40);

        jScrollPane3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jScrollPane3MouseReleased(evt);
            }
        });

        tablaact.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tablaact.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tablaactFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tablaactFocusLost(evt);
            }
        });
        tablaact.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tablaactMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tablaact);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(30, 10, 420, 420);
        jPanel1.add(txtKilometraje);
        txtKilometraje.setBounds(1189, 320, 90, 20);

        lblKilometraje.setText("Kilometraje");
        jPanel1.add(lblKilometraje);
        lblKilometraje.setBounds(1114, 320, 60, 14);

        menuInforme.addTab("Solicitudes aceptadas", new javax.swing.ImageIcon(getClass().getResource("/Iconos/solicitud.png")), jPanel1); // NOI18N

        tablainfo1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tablainfo1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tablainfo1MouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tablainfo1);

        menuInforme.addTab("Solicitudes finalizadas", new javax.swing.ImageIcon(getClass().getResource("/Iconos/solicitud.png")), jScrollPane2); // NOI18N

        jPanel21.add(menuInforme);
        menuInforme.setBounds(0, 0, 1310, 520);

        informe.add(jPanel21);
        jPanel21.setBounds(20, 70, 1310, 520);

        btnregresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/atras.png"))); // NOI18N
        btnregresar.setText("Regresar");
        btnregresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnregresarActionPerformed(evt);
            }
        });
        informe.add(btnregresar);
        btnregresar.setBounds(867, 130, 170, 40);

        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fondo.png"))); // NOI18N
        informe.add(jLabel24);
        jLabel24.setBounds(0, 0, 1367, 769);

        solicviaticos.addTab("Informe", new javax.swing.ImageIcon(getClass().getResource("/Iconos/solicitud.png")), informe); // NOI18N

        jMenu1.setText("Archivo");

        itemAnterior.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_LEFT, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        itemAnterior.setText("Anterior");
        itemAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAnteriorActionPerformed(evt);
            }
        });
        jMenu1.add(itemAnterior);

        itemSiguiente.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_RIGHT, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        itemSiguiente.setText("Siguiente");
        itemSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSiguienteActionPerformed(evt);
            }
        });
        jMenu1.add(itemSiguiente);

        mi_inventario.setText("Inventario");
        mi_inventario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_inventarioActionPerformed(evt);
            }
        });
        jMenu1.add(mi_inventario);

        mi_pases.setText("Pases E/S");
        mi_pases.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi_pasesActionPerformed(evt);
            }
        });
        jMenu1.add(mi_pases);
        jMenu1.add(jSeparator1);

        itemSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        itemSalir.setText("Salir");
        itemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSalirActionPerformed(evt);
            }
        });
        jMenu1.add(itemSalir);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        menuOpciones.setText("Permisos");

        menuPermisos.setText("Permisos puestos");
        menuPermisos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPermisosActionPerformed(evt);
            }
        });
        menuOpciones.add(menuPermisos);

        menuPuestoArea.setText("Puestos & Áreas");
        menuPuestoArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPuestoAreaActionPerformed(evt);
            }
        });
        menuOpciones.add(menuPuestoArea);

        MenuSolicitud.setText("Permisos solicitud");
        MenuSolicitud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSolicitudActionPerformed(evt);
            }
        });
        menuOpciones.add(MenuSolicitud);

        jMenuBar1.add(menuOpciones);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(solicviaticos, javax.swing.GroupLayout.DEFAULT_SIZE, 1354, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(solicviaticos, javax.swing.GroupLayout.DEFAULT_SIZE, 758, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void itemAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAnteriorActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_itemAnteriorActionPerformed

    private void itemSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSiguienteActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_itemSiguienteActionPerformed

    private void itemSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSalirActionPerformed
        // TODO add your handling code here:
        Object[] botones = {"Confirmar", "Cancelar"};
        int opcion = JOptionPane.showOptionDialog(this, "¿Salir del Sistema?", "Confirmación",
                JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, botones, botones[0]);

        if (opcion == 0) {
            System.exit(0);
        } else if (opcion == 1) {
            //Cerrar sesion
        }
    }//GEN-LAST:event_itemSalirActionPerformed

    private void menuPermisosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPermisosActionPerformed
        // TODO add your handling code here:
        /*if((manager_permisos.alta_permisos(Username) && manager_permisos.baja_permisos(Username)) || manager_permisos.consulta_permisos(Username)){
         if(manager_permisos.alta_permisos(Username) && manager_permisos.baja_permisos(Username)){
         Ventana_permisos_puesto ob = new Ventana_permisos_puesto(this, true);
         ob.setVisible(true);
         }else{
         Ventana_permisos_puesto_consulta ob = new Ventana_permisos_puesto_consulta(this, true);
         ob.setVisible(true);
         }
         }else{
         JOptionPane.showMessageDialog(null, "Usted no tiene acceso a los permisos estaticos de los puestos.");
         }*/
    }//GEN-LAST:event_menuPermisosActionPerformed

    private void menuPuestoAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPuestoAreaActionPerformed
        // TODO add your handling code here:
        /*Ventana_Puestos_Area ob = new Ventana_Puestos_Area(this, true);
         ob.setVisible(true);*/
    }//GEN-LAST:event_menuPuestoAreaActionPerformed

    private void MenuSolicitudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSolicitudActionPerformed
        // TODO add your handling code here:
        /* if((manager_permisos.alta_permisos(Username) && manager_permisos.baja_permisos(Username)) || manager_permisos.consulta_permisos(Username)){
         if(manager_permisos.alta_permisos(Username) && manager_permisos.baja_permisos(Username)){
         Ventana_permisosSolicitud ob = new Ventana_permisosSolicitud(this, true);
         ob.setVisible(true);
         }else{
         Ventana_permisosSolicitud_consulta ob = new Ventana_permisosSolicitud_consulta(this, true);
         ob.setVisible(true);
         }
         }else{
         JOptionPane.showMessageDialog(null, "Usted no tiene acceso a los permisos de las solicitudes.");
         }*/
    }//GEN-LAST:event_MenuSolicitudActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        txtobvia.enable(false);
        txtobveh.enable(false);
        btnregresar.setVisible(false);
        //btnguardar.setVisible(false);
        if (manager_permisos.accesoModulo("consulta", "Solicitud Viaticos", Principal.Username)) {
            tablasolic.setModel(manager_soviaticos.getTasol());
            tablasolicvehiculo.setModel(manager_soviaticos.getTasolVehiculo());
        }
        if (manager_permisos.accesoModulo("consulta", "Tablon Solicitudes", Principal.Username)) {
            tablonpendientes.setModel(manager_soviaticos.SolicitudP());
            tablonaceptadas.setModel(manager_soviaticos.SolicitudA());
            tabloncanceladas.setModel(manager_soviaticos.SolicitudC());
            tablonarchivadas.setModel(manager_soviaticos.SolicitudAr());
        }
        if (manager_permisos.accesoModulo("consulta", "Informe", Principal.Username)) {
            Solicitud("SELECT O.Folio, S.Nombre, S.Actividad, S.Lugar, O.Monto FROM Solicitud_viatico S, Oficio_comision O WHERE S.Estado = 'AR' AND S.Reporte = '0' AND S.idSolicitud = O.Solicitud_idSolicitud AND O.Monto != 0");
            SolicitudR("SELECT I.Id_Informe, O.FOLIO, S.Nombre, O.Monto, I.importe_total FROM Solicitud_viatico S, Oficio_comision O, Informe I WHERE S.Estado = 'AR' AND S.Reporte = '1' AND S.idSolicitud = O.Solicitud_idSolicitud AND I.Solicitud_idSolicitud = S.idSolicitud AND O.Monto != 0 ORDER BY I.Id_Informe DESC");
        }
    }//GEN-LAST:event_formWindowActivated

    private void btnAddInventario2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddInventario2ActionPerformed
        //addSolicitudViaticos asv = new addSolicitudViaticos(this, true);
        //asv.setVisible(true);
    }//GEN-LAST:event_btnAddInventario2ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        btnregresar1.setVisible(false);
            txtobvia.setText("");
            txtKilometraje.setVisible(false);
            lblKilometraje.setVisible(false);
            txtobveh.setText("");
            GaTot.setText("");
            txtobvia.enable(false);
            txtobveh.enable(false);
            txtobvia.setVisible(false);
            txtobveh.setVisible(false);
            btnregresar.setVisible(false);
            btnguardar.setVisible(false);
            tablainfo.enable(true);
            jlb.setVisible(true);
            txtbusquedasoli2.setVisible(true);
            jLabel1.setVisible(false);
            lblObsVehiculo.setVisible(false);
            jLabel3.setVisible(false);
            GaTot.enable(false);
            GaTot.setVisible(false);
            jScrollPane3.setVisible(false);
            jScrollPane1.setVisible(true);
        txtobvia.enable(false);
        guardargac.setVisible(false);
        txtobveh.enable(false);
        btnregresar.setVisible(false);
        btnguardar.setVisible(false);
        if (manager_permisos.accesoModulo("consulta", "Solicitud Viaticos", Principal.Username)) {
            tablasolic.setModel(manager_soviaticos.getTasol());
            tablasolicvehiculo.setModel(manager_soviaticos.getTasolVehiculo());
        }
        if (manager_permisos.accesoModulo("consulta", "Tablon Solicitudes", Principal.Username)) {
            tablonpendientes.setModel(manager_soviaticos.SolicitudP());
            tablonaceptadas.setModel(manager_soviaticos.SolicitudA());
            tabloncanceladas.setModel(manager_soviaticos.SolicitudC());
            tablonarchivadas.setModel(manager_soviaticos.SolicitudAr());
        }
        if (manager_permisos.accesoModulo("consulta", "Informe", Principal.Username)) {
            Solicitud("SELECT O.Folio, S.Nombre, S.Actividad, S.Lugar, O.Monto FROM Solicitud_viatico S, Oficio_comision O WHERE S.Estado = 'AR' AND S.Reporte = '0' AND S.idSolicitud = O.Solicitud_idSolicitud AND O.Monto != 0");
            SolicitudR("SELECT I.Id_Informe, O.FOLIO, S.Nombre, O.Monto, I.importe_total FROM Solicitud_viatico S, Oficio_comision O, Informe I WHERE S.Estado = 'AR' AND S.Reporte = '1' AND S.idSolicitud = O.Solicitud_idSolicitud AND I.Solicitud_idSolicitud = S.idSolicitud AND O.Monto != 0 ORDER BY I.Id_Informe DESC");
        }
    }//GEN-LAST:event_formWindowOpened

    private void mi_inventarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_inventarioActionPerformed
        try {
            Principal a = new Principal();
            a.setVisible(true);
            this.dispose();
        } catch (ClassNotFoundException | SQLException | IOException ex) {
            Logger.getLogger(PrincipalS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mi_inventarioActionPerformed

    private void Impri_SolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Impri_SolActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("consulta", "Solicitud Viaticos", Principal.Username)) {
            int fila = tablasolicvehiculo.getSelectedRow();
            limpiar = false;
            String id = null;
            try {

                tablasolicvehiculo.clearSelection();
                CrearPDF pdf = new CrearPDF();
                if (fila >= 0) {
                    id = tablasolicvehiculo.getValueAt(fila, 0).toString();
                    pdf.generarPDFSolicitud(id);
                }
            } catch (Exception e) {

            }
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para imprimir solicitudes de viáticos.");
        }
    }//GEN-LAST:event_Impri_SolActionPerformed

    private void ConsultarPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsultarPActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("consulta", "Tablon Solicitudes", Principal.Username)) {
            if (c == 0) {
                c = 1;
            } else {
                s.setVisible(false);
                c = 1;
            }
            int k = tablonpendientes.getSelectedRow();
            if (k >= 0) {
                int id = Integer.parseInt(tablonpendientes.getValueAt(k, 0).toString());
                s = new visSolicitudViaticos();
                s.IdUsuario(id, 0, 0);
                s.setVisible(true);
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar solicitud");
            }
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para consultar las solicitudes.");
        }
    }//GEN-LAST:event_ConsultarPActionPerformed

    private void ConsultarAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsultarAActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("consulta", "Tablon Solicitudes", Principal.Username)) {
            if (c == 0) {
                c = 1;
            } else {
                s.setVisible(false);
                c = 1;
            }
            int i = tablonaceptadas.getSelectedRow();
            if (i >= 0) {
                String folio = tablonaceptadas.getValueAt(i, 0).toString();
                String idSolicitud = "";
                try {
                    Statement sentencia = cn.createStatement();
                    ResultSet rs = sentencia.executeQuery("SELECT Solicitud_idSolicitud FROM Oficio_comision WHERE Folio = '" + folio + "'");
                    rs.next();
                    idSolicitud = rs.getString("Solicitud_idSolicitud");

                    s = new visSolicitudViaticos();
                    s.IdUsuario(Integer.parseInt(idSolicitud), 1, 1);
                } catch (SQLException ex) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Error en la consulta");

                }
                /*catch (ClassNotFoundException e) {
                 e.printStackTrace();
                 }//fin del catch*/

                s.setVisible(true);
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar solicitud");
            }
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para consultar las solicitudes.");
        }
    }//GEN-LAST:event_ConsultarAActionPerformed

    private void ConsultarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsultarCActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("consulta", "Tablon Solicitudes", Principal.Username)) {
            if (c == 0) {
                c = 1;
            } else {
                s.setVisible(false);
                c = 1;
            }
            int k = tabloncanceladas.getSelectedRow();
            if (k >= 0) {
                int id = Integer.parseInt(tabloncanceladas.getValueAt(k, 0).toString());
                s = new visSolicitudViaticos();
                s.IdUsuario(id, 0, 2);
                s.setVisible(true);
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar solicitud");
            }
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para consultar las solicitudes.");
        }
    }//GEN-LAST:event_ConsultarCActionPerformed

    private void OficioComisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OficioComisionActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("consulta", "Tablon Solicitudes", Principal.Username)) {
            int i = tablonaceptadas.getSelectedRow();
            if (i >= 0) {
                String folio = tablonaceptadas.getValueAt(i, 0).toString();
                try {
                    pdf.oficio_comision(folio);
                } catch (DocumentException ex) {
                    Logger.getLogger(PrincipalS.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(PrincipalS.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar solicitud");
            }
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para imprimir las solicitudes.");
        }
    }//GEN-LAST:event_OficioComisionActionPerformed

    private void AsignarMontoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AsignarMontoActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("actualizar", "Tablon Solicitudes", Principal.Username)) {
            int k = tablonaceptadas.getSelectedRow();
            if (k >= 0) {
                String folio = tablonaceptadas.getValueAt(k, 0).toString();
                String idSolicitud = "";
                try {

                    Statement sentencia = cn.createStatement();
                    String valor = javax.swing.JOptionPane.showInputDialog("Asignar monto");

                    if (valor == null) {

                    } else {
                        float monto = Float.parseFloat(valor);
                        if (monto < 0) {
                            javax.swing.JOptionPane.showMessageDialog(null, "Monto no valido");
                        } else {
                            sentencia.executeUpdate("UPDATE Oficio_comision SET Monto = " + monto + "WHERE(Folio =" + folio + ")");
                            //sentencia.executeUpdate("UPDATE solicitud_viatico SET Estado = 'C' WHERE (idSolicitud = '" + id + "')");
                            javax.swing.JOptionPane.showMessageDialog(null, "Monto Asignado");
                            ResultSet rs = sentencia.executeQuery("SELECT Solicitud_idSolicitud FROM Oficio_comision WHERE Folio = '" + folio + "'");
                            while (rs.next()) {
                                idSolicitud = rs.getString("Solicitud_idSolicitud");
                            }
                            sentencia.executeUpdate("UPDATE Solicitud_viatico SET Estado = 'AR', gastos_comprobar = 'false' WHERE (idSolicitud = " + idSolicitud + ")");
                            javax.swing.JOptionPane.showMessageDialog(null, "Solicitud archivada");
                        }
                    }
                } catch (SQLException ex) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Error en la consulta");

                } catch (NumberFormatException exp) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Ingresar solo números");
                }//fin del catch

            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar solicitud");
            }
            tablonarchivadas.setModel(manager_soviaticos.SolicitudAr());
            tablonaceptadas.setModel(manager_soviaticos.SolicitudA());
            Solicitud("SELECT O.Folio, S.Nombre, S.Actividad, S.Lugar, O.Monto FROM Solicitud_viatico S, Oficio_comision O WHERE S.Estado = 'AR' AND S.Reporte = '0' AND S.idSolicitud = O.Solicitud_idSolicitud AND O.Monto != 0");
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para modificar el monto.");
        }
    }//GEN-LAST:event_AsignarMontoActionPerformed

    private void AceptarPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AceptarPActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("actualizar", "Tablon Solicitudes", Principal.Username)) {
            int k = tablonpendientes.getSelectedRow();
            if (k >= 0) {
                int id = Integer.parseInt(tablonpendientes.getValueAt(k, 0).toString());
                Calendar calendar = Calendar.getInstance();
                try {
                    String total = "";
                    Statement sentencia = cn.createStatement();
                    ResultSet rs0 = sentencia.executeQuery("SELECT COUNT(*) as Folio FROM Oficio_comision");
                    while (rs0.next()) {
                        total = rs0.getString("Folio");
                    }
                    int total1 = Integer.parseInt(total);
                    int folio = 0;
                    String valor = "";
                    if (total1 != 0) {
                        ResultSet rs = sentencia.executeQuery("SELECT MAX(Folio) AS Folio FROM Oficio_comision");
                        while (rs.next()) {
                            valor = rs.getString("Folio");
                        }
                        int an = Integer.parseInt(valor.substring(0, 4));
                        if (an == calendar.get(Calendar.YEAR)) {
                            valor = valor.substring(4);
                            folio = Integer.parseInt(valor) + 1;
                            valor = an + "" + folio;
                            folio = Integer.parseInt(valor);
                        } else {
                            valor = calendar.get(Calendar.YEAR) + "1";
                            folio = Integer.parseInt(valor);
                        }
                    } else {
                        valor = calendar.get(Calendar.YEAR) + "1";
                        folio = Integer.parseInt(valor);
                    }
                    String estadolocalidad = "";
                    String nombre = "";
                    String fecha_salida = "";
                    String fecha_llegada = "";
                    ResultSet rs1 = sentencia.executeQuery("SELECT Fecha_salida,Lugar,Nombre,Fecha_llegada FROM Solicitud_viatico WHERE (idSolicitud = '" + id + "')");
                    while (rs1.next()) {
                        fecha_salida = rs1.getString("Fecha_salida");
                        estadolocalidad = rs1.getString("Lugar");
                        nombre = rs1.getString("Nombre");
                        fecha_llegada = rs1.getString("Fecha_llegada");
                    }
                    final long MILLSECS_PER_DAY = 24 * 60 * 60 * 1000; //Milisegundos al día 
                    int año = Integer.parseInt(fecha_salida.substring(0, 4));
                    int mes = Integer.parseInt(fecha_salida.substring(5, 7));
                    int dia = Integer.parseInt(fecha_salida.substring(8, 10));
                    Calendar calendar2 = new GregorianCalendar(año, mes - 1, dia);
                    java.sql.Date fecha_s = new java.sql.Date(calendar2.getTimeInMillis());
                    año = Integer.parseInt(fecha_llegada.substring(0, 4));
                    mes = Integer.parseInt(fecha_llegada.substring(5, 7));
                    dia = Integer.parseInt(fecha_llegada.substring(8, 10));
                    Calendar calendar3 = new GregorianCalendar(año, mes - 1, dia);
                    java.sql.Date fecha_ll = new java.sql.Date(calendar3.getTimeInMillis());
                    long dias = (fecha_ll.getTime() - fecha_s.getTime()) / MILLSECS_PER_DAY;
                    String et[] = new String[2];
                    et = estadolocalidad.split(",");
                    String empleado[] = new String[4];
                    empleado = nombre.split(" ");
                    //String nombres = empleado[0] + " " + empleado[1];
                    String puesto = "";
                    ResultSet rs2 = sentencia.executeQuery("SELECT puesto FROM Empleados E WHERE concat(E.nombres,\" \",E.apellido_p,\" \",E.apellido_m) =  '"+nombre+"'");
                    while (rs2.next()) {
                        puesto = rs2.getString("puesto");
                    }
                    String tarifa = "";
                    float tarif = 0;
                    if (et[0].equals("Nayarit")) {
                        if (et[1].equals("Bahía de Banderas")) {
                            if (dias == 0) {
                                ResultSet rs3 = sentencia.executeQuery("SELECT SinPernoctarBDB FROM Puestos_Trabajo WHERE ID_Puesto = '" + puesto + "'");
                                while (rs3.next()) {
                                    tarifa = rs3.getString("SinPernoctarBDB");
                                }
                            } else {
                                ResultSet rs3 = sentencia.executeQuery("SELECT PernoctandoBDB FROM Puestos_Trabajo WHERE ID_Puesto = '" + puesto + "'");
                                while (rs3.next()) {
                                    tarifa = rs3.getString("PernoctandoBDB");
                                }
                                tarif = Float.parseFloat(tarifa);
                                tarif = (tarif * dias) + tarif;
                                tarifa = tarif + "";
                            }
                        } else {
                            if (et[1].equals("Tepic") || et[1].equals("Xalisco")) {
                                tarifa = "0.00";
                            } else {
                                if (et[1].equals("Acaponeta") || et[1].equals("Amatlán de Cañas") || et[1].equals("El Nayar") || et[1].equals("Huajicori") || et[1].equals("La Yesca") || et[1].equals("Tecuala")) {
                                    if (dias == 0) {
                                        ResultSet rs3 = sentencia.executeQuery("SELECT  SinPernoctar100 FROM Puestos_Trabajo WHERE ID_Puesto = '" + puesto + "'");
                                        while (rs3.next()) {
                                            tarifa = rs3.getString("SinPernoctar100");
                                        }
                                    } else {
                                        ResultSet rs3 = sentencia.executeQuery("SELECT Pernoctando100 FROM Puestos_Trabajo WHERE ID_Puesto = '" + puesto + "'");
                                        while (rs3.next()) {
                                            tarifa = rs3.getString("Pernoctando100");
                                        }
                                        tarif = Float.parseFloat(tarifa);
                                        tarif = (tarif * dias) + tarif;
                                        tarifa = tarif + "";
                                    }
                                } else {
                                    if (dias == 0) {
                                        ResultSet rs3 = sentencia.executeQuery("SELECT  SinPernoctar30100 FROM Puestos_Trabajo WHERE ID_Puesto = '" + puesto + "'");
                                        while (rs3.next()) {
                                            tarifa = rs3.getString("SinPernoctar30100");
                                        }
                                    } else {
                                        ResultSet rs3 = sentencia.executeQuery("SELECT Pernoctando30100 FROM Puestos_Trabajo WHERE ID_Puesto = '" + puesto + "'");
                                        while (rs3.next()) {
                                            tarifa = rs3.getString("Pernoctando30100");
                                        }
                                        tarif = Float.parseFloat(tarifa);
                                        tarif = (tarif * dias) + tarif;
                                        tarifa = tarif + "";
                                    }
                                }
                            }
                        }
                    } else {
                        if (dias == 0) {
                            ResultSet rs3 = sentencia.executeQuery("SELECT SinPernoctarFDE FROM Puestos_Trabajo WHERE ID_Puesto = '" + puesto + "'");
                            while (rs3.next()) {
                                tarifa = rs3.getString("SinPernoctarFDE");
                            }
                        } else {
                            ResultSet rs3 = sentencia.executeQuery("SELECT PernoctandoFDE FROM Puestos_Trabajo WHERE ID_Puesto = '" + puesto + "'");
                            while (rs3.next()) {
                                tarifa = rs3.getString("PernoctandoFDE");
                            }
                            tarif = Float.parseFloat(tarifa);
                            tarif = (tarif * dias) + tarif;
                            tarifa = tarif + "";
                        }
                    }
                    sentencia.execute("INSERT INTO Oficio_comision VALUES(" + folio + "," + id + "," + tarifa + ")");
                    sentencia.executeUpdate("UPDATE Solicitud_viatico SET Estado = 'A' WHERE (idSolicitud = '" + id + "')");
                    javax.swing.JOptionPane.showMessageDialog(null, "Solicitud aceptada");
                } catch (SQLException ex) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Error en la consulta o folio ya asignado");
                }/*catch (ClassNotFoundException e) {
                 e.printStackTrace();
                 }*/ //fin del catch
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar solicitud");
            }
            tablonpendientes.setModel(manager_soviaticos.SolicitudP());
            tablonaceptadas.setModel(manager_soviaticos.SolicitudA());
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para aceptar solicitudes.");
        }
    }//GEN-LAST:event_AceptarPActionPerformed

    private void AceptarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AceptarCActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("actualizar", "Tablon Solicitudes", Principal.Username)) {
            int k = tabloncanceladas.getSelectedRow();
            if (k >= 0) {
                int id = Integer.parseInt(tabloncanceladas.getValueAt(k, 0).toString());
                Calendar calendar = Calendar.getInstance();
                try {

                    String total = "";
                    Statement sentencia = cn.createStatement();
                    ResultSet rs0 = sentencia.executeQuery("SELECT COUNT(*) as Folio FROM Oficio_comision");
                    while (rs0.next()) {
                        total = rs0.getString("Folio");
                    }
                    int total1 = Integer.parseInt(total);
                    int folio = 0;
                    String valor = "";
                    if (total1 != 0) {
                        ResultSet rs = sentencia.executeQuery("SELECT MAX(Folio) AS Folio FROM Oficio_comision");
                        while (rs.next()) {
                            valor = rs.getString("Folio");
                        }
                        int an = Integer.parseInt(valor.substring(0, 4));
                        if (an == calendar.get(Calendar.YEAR)) {
                            valor = valor.substring(4);
                            folio = Integer.parseInt(valor) + 1;
                            valor = an + "" + folio;
                            folio = Integer.parseInt(valor);
                        } else {
                            valor = calendar.get(Calendar.YEAR) + "1";
                            folio = Integer.parseInt(valor);
                        }
                    } else {
                        valor = calendar.get(Calendar.YEAR) + "1";
                        folio = Integer.parseInt(valor);
                    }
                    sentencia.execute("INSERT INTO Oficio_comision VALUES(" + folio + "," + id + "," + 0.00 + ")");
                    sentencia.executeUpdate("UPDATE Solicitud_viatico SET Estado = 'A' WHERE (idSolicitud = '" + id + "')");
                    sentencia.executeUpdate("UPDATE Solicitud_viatico SET Motivo = NULL WHERE (idSolicitud = '" + id + "')");
                    javax.swing.JOptionPane.showMessageDialog(null, "Solicitud aceptada");

                } catch (SQLException ex) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Error en la consulta o folio ya asignado");

                }/*catch (ClassNotFoundException e) {
                 e.printStackTrace();
                 }*/ //fin del catch

            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar solicitud");
            }
            tablonaceptadas.setModel(manager_soviaticos.SolicitudA());
            tabloncanceladas.setModel(manager_soviaticos.SolicitudC());
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para aceptar solicitudes.");
        }
    }//GEN-LAST:event_AceptarCActionPerformed

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("alta", "Solicitud Viaticos", Principal.Username)) {
            addSolicitudViaticos asv = new addSolicitudViaticos(this, true);
            asv.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para realizar solicitudes de viáticos.");
        }
    }//GEN-LAST:event_AddActionPerformed

    private void Add1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add1ActionPerformed
        // TODO add your handling code here:
        
        
        if (manager_permisos.accesoModulo("alta", "Solicitud Viaticos", Principal.Username)) {
            addSolicitudViaticos asv = new addSolicitudViaticos(this, true);
            conVehiculo = 0;
            asv.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para realizar solicitudes de viáticos.");
        }
    }//GEN-LAST:event_Add1ActionPerformed

    private void CambiarConsejeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CambiarConsejeroActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("actualizar", "Solicitud Viaticos", Principal.Username)) {
            String nuevo = JOptionPane.showInputDialog("Inserte el nombre del nuevo director general");
            cbd.ejecutar("update Director_General set Nombre='" + nuevo + "'");
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para modificar el nombre del consejero presidente.");
        }
    }//GEN-LAST:event_CambiarConsejeroActionPerformed

    private void CambiarConsejero1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CambiarConsejero1ActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("actualizar", "Solicitud Viaticos", Principal.Username)) {
            String nuevo = JOptionPane.showInputDialog("Inserte el nombre del nuevo director general");
            cbd.ejecutar("update Director_General set Nombre='" + nuevo + "'");
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para modificar el nombre del consejero presidente.");
        }
    }//GEN-LAST:event_CambiarConsejero1ActionPerformed

    private void SolicitarVehiculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SolicitarVehiculoActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("alta", "Solicitud Viaticos", Principal.Username)) {
            addSolicitudViaticos asv = new addSolicitudViaticos(this, true);
            conVehiculo = 1;
            asv.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para realizar solicitudes de vehículos.");
        }
    }//GEN-LAST:event_SolicitarVehiculoActionPerformed

    private void SolicitarVehiculo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SolicitarVehiculo1ActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("alta", "Solicitud Viaticos", Principal.Username)) {
            addSolicitudViaticos asv = new addSolicitudViaticos(this, true);
            conVehiculo = 1;
            asv.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para realizar solicitudes de vehículos.");
        }
    }//GEN-LAST:event_SolicitarVehiculo1ActionPerformed

    private void tablonaceptadasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablonaceptadasMouseReleased
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {
            int r = tablonaceptadas.rowAtPoint(evt.getPoint());
            if (r >= 0 && r < tablonaceptadas.getRowCount()) {
                tablonaceptadas.setRowSelectionInterval(r, r);
            }
            MenuTablonA.show(evt.getComponent(), evt.getX(), evt.getY());//Mostramos el popMenu en la posición donde esta el cursor
        }//clic derecho
    }//GEN-LAST:event_tablonaceptadasMouseReleased

    private void tablonpendientesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablonpendientesMouseReleased
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {
            int r = tablonpendientes.rowAtPoint(evt.getPoint());
            if (r >= 0 && r < tablonpendientes.getRowCount()) {
                tablonpendientes.setRowSelectionInterval(r, r);
            }
            MenuTablonP.show(evt.getComponent(), evt.getX(), evt.getY());//Mostramos el popMenu en la posición donde esta el cursor
        }//clic derecho
    }//GEN-LAST:event_tablonpendientesMouseReleased

    private void btnregresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnregresarActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_btnregresarActionPerformed

    private void btnguardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnguardarActionPerformed
        // TODO add your handling code here:
        try {
            int s = JOptionPane.showConfirmDialog(null, "¿Esta seguro?", "Alerta!", JOptionPane.YES_NO_OPTION);
            if (s == JOptionPane.YES_OPTION) {
                String id = "";
                Statement sentencia = cn.createStatement();
                ResultSet rs = sentencia.executeQuery("SELECT Solicitud_idSolicitud FROM Oficio_comision WHERE Folio = " + folio);
                while (rs.next()) {
                    id = rs.getString("Solicitud_idSolicitud");
                }
                if(!txtKilometraje.getText().equals("")){
                    rs=cbd.getTabla("select * from vehiculo_viatico VV inner join solicitud_vehiculo SV on VV.solicitud_vehiculo_idsolicitud_vehiculo=SV.idsolicitud_vehiculo inner join vehiculo_usado VU on SV.vehiculo_usado_idvehiculo_usado=VU.idvehiculo_usado where VV.solicitud_viatico_idSolicitud="+id, cn);
                    rs.next();
                    String idVehiculo_usado=rs.getString("idVehiculo_usado");
                    String matricula=rs.getString("vehiculos_matricula");
                    int kilometrajeActual=Integer.parseInt(rs.getString("kilometraje"));
                    int kilometrajeActualizado=Integer.parseInt(txtKilometraje.getText());
                    if(kilometrajeActualizado<kilometrajeActual){
                        JOptionPane.showMessageDialog(this, "El kilometraje debe de ser mayor al kilometraje actual de: "+kilometrajeActual);
                        return;
                    }
                    sentencia.executeUpdate("UPDATE vehiculo_usado SET kilometraje='"+kilometrajeActualizado+"' where idVehiculo_usado="+idVehiculo_usado);
                    rs=cbd.getTabla("select * from vehiculos where matricula='"+matricula+"'", cn);
                    rs.next();
                    String observaciones=rs.getString("Observaciones")+"\n------------------\n"+txtobveh.getText();
                    sentencia.executeUpdate("UPDATE vehiculos SET kilometraje='"+kilometrajeActualizado+"' where matricula='"+matricula+"'");
                    sentencia.executeUpdate("UPDATE vehiculos SET observaciones='"+observaciones+"' where matricula='"+matricula+"'");
                    
                    
                }
                sentencia.executeUpdate("UPDATE Solicitud_viatico SET Reporte = '1' WHERE (idSolicitud = " + id + ")");
                if (c == 1) {
                    sentencia.execute("INSERT INTO Informe (Observaciones,Observaciones_Vehiculo,Solicitud_idSolicitud,importe_total) VALUES('" + txtobvia.getText() + "','" + txtobveh.getText() + "'," + id + "," + GaTot.getText() + ")");
                    //-----------------------------
                    String idInforme = "";
                    ResultSet rs2 = sentencia.executeQuery("SELECT MAX(id_informe) AS id_informe FROM Informe");
                    while (rs2.next()) {
                        idInforme = rs2.getString("id_informe");
                    }
                    //-----------------------------
                    String idGastos = "";
                    int filas = tablaact.getRowCount();
                    if (filas != 0) {
                        for (int j = 0; filas > j; j++) {
                            sentencia.execute("INSERT INTO Gastos (Precio,Descripcion,Factura) VALUES('" + tablaact.getValueAt(j, 1).toString() + "','" + tablaact.getValueAt(j, 0).toString() + "','" + tablaact.getValueAt(j, 2).toString() + "')");
                            ResultSet rs3 = sentencia.executeQuery("SELECT MAX(id_Gastos) AS id_Gastos FROM Gastos");
                            while (rs3.next()) {
                                idGastos = rs3.getString("id_Gastos");
                            }
                            sentencia.execute("INSERT INTO Informe_Gastos VALUES(" + idGastos + "," + idInforme + ")");
                        }
                    }
                    javax.swing.JOptionPane.showMessageDialog(null, "Reporte Generado");
                } else {
                    sentencia.execute("INSERT INTO Informe (Observaciones,Observaciones_Vehiculo,Solicitud_idSolicitud) VALUES('" + txtobvia.getText() + "','" + txtobveh.getText() + "'," + id + ")");
                    javax.swing.JOptionPane.showMessageDialog(null, "Reporte Generado");
                }
                if (c == 1) {
                    txtobvia.enable(false);
                    txtobveh.enable(false);
                    tablaact.enable(false);
                    GaTot.enable(false);
                } else {
                    txtobvia.enable(false);
                    txtobveh.enable(false);
                }
            }
        } catch (SQLException ex) {
            javax.swing.JOptionPane.showMessageDialog(null, "Error al generar reporte");
        } catch(NumberFormatException e){
            javax.swing.JOptionPane.showMessageDialog(null, "Kilometraje debe ser un número positivo mayor al kilometraje actual");
        }
    }//GEN-LAST:event_btnguardarActionPerformed

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource("Iconos/IEE.png"));


        return retValue;
    }
    private void txtbusquedasoli2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbusquedasoli2KeyReleased
        // TODO add your handling code here:
        if (menuInforme.getSelectedIndex() == 0) {
            modelo = new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return false;
                }
            };
            modelo.addColumn("Folio");
            modelo.addColumn("Nombre");
            modelo.addColumn("Actividad");
            modelo.addColumn("Lugar");
            modelo.addColumn("Monto");
            this.tablainfo.setModel(modelo);
            try {
                Statement sentencia = cn.createStatement();

                ResultSet rs = sentencia.executeQuery("SELECT O.Folio, S.Nombre, S.Actividad, S.Lugar, O.Monto FROM Solicitud_viatico S, Oficio_comision O WHERE S.Estado = 'AR' AND S.Reporte = '0' AND S.idSolicitud = O.Solicitud_idSolicitud AND O.Monto != 0 AND (O.Folio LIKE '%" + txtbusquedasoli2.getText() + "%'"
                        + "OR S.Nombre LIKE '%" + txtbusquedasoli2.getText() + "%' OR S.Actividad LIKE '%" + txtbusquedasoli2.getText() + "%' OR S.Lugar LIKE '%" + txtbusquedasoli2.getText() + "%'OR O.Monto LIKE '%" + txtbusquedasoli2.getText() + "%') ");

                String solicitud[] = new String[5];
                while (rs.next()) {
                    solicitud[0] = rs.getString("Folio");
                    solicitud[1] = rs.getString("Nombre");
                    solicitud[2] = rs.getString("Actividad");
                    solicitud[3] = rs.getString("Lugar");
                    solicitud[4] = rs.getString("Monto");
                    modelo.addRow(solicitud);
                }

            } catch (SQLException ex) {
                javax.swing.JOptionPane.showMessageDialog(null, "Error en la consulta");

            }
        }
        if (menuInforme.getSelectedIndex() == 1) {
            modelo = new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return false;
                }
            };
            modelo.addColumn("ID Informe");
            modelo.addColumn("Folio");
            modelo.addColumn("Nombre");
            modelo.addColumn("Monto");
            modelo.addColumn("Importe total");
            this.tablainfo1.setModel(modelo);
            try {
                Statement sentencia = cn.createStatement();
                ResultSet rs = sentencia.executeQuery("SELECT I.Id_Informe, O.Folio, S.Nombre, O.Monto, I.importe_total FROM Solicitud_viatico S, Oficio_comision O, Informe I WHERE S.Estado = 'AR' AND S.Reporte = '1' AND S.idSolicitud = O.Solicitud_idSolicitud AND I.Solicitud_idSolicitud = S.idSolicitud AND O.Monto != 0 AND (I.Id_Informe LIKE '%" + txtbusquedasoli2.getText()
                        + "%' OR O.Folio LIKE '%" + txtbusquedasoli2.getText() + "%' OR S.Nombre LIKE '%" + txtbusquedasoli2.getText() + "%' OR O.Monto LIKE '%" + txtbusquedasoli2.getText() + "%' OR I.importe_total LIKE '%" + txtbusquedasoli2.getText() + "%') ORDER BY I.Id_Informe DESC");

                String solicitud[] = new String[5];
                while (rs.next()) {
                    solicitud[0] = rs.getString("Id_Informe");
                    solicitud[1] = rs.getString("Folio");
                    solicitud[2] = rs.getString("Nombre");
                    solicitud[3] = rs.getString("Monto");
                    solicitud[4] = rs.getString("importe_total");
                    modelo.addRow(solicitud);

                }

            } catch (SQLException ex) {
                javax.swing.JOptionPane.showMessageDialog(null, "Error en la consulta");

            }
        }
    }//GEN-LAST:event_txtbusquedasoli2KeyReleased

    private void txtbusquedasoli2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbusquedasoli2KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtbusquedasoli2KeyPressed

    private void txtbusquedasoliKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbusquedasoliKeyReleased
        // TODO add your handling code here:
        if (jTabbedPane1.getSelectedIndex() == 0) {
            modelo = new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return false;
                }
            };
            modelo.addColumn("idSolicitud");
            modelo.addColumn("Nombre");
            modelo.addColumn("Puesto");
            modelo.addColumn("Fecha de salida");
            modelo.addColumn("Fecha de llegada");
            modelo.addColumn("Lugar");
            modelo.addColumn("Pernoctado");
            modelo.addColumn("Actividad");
            modelo.addColumn("Vehiculo");
            modelo.addColumn("Estado");
            this.tablasolic.setModel(modelo);
            try {

                Statement sentencia = cn.createStatement();

                ResultSet rs = sentencia.executeQuery("SELECT idSolicitud, Nombre, Puesto, Fecha_salida, Fecha_llegada, Lugar, Pernoctado, Actividad, Vehiculo, Estado FROM Solicitud_viatico WHERE idSolicitud LIKE '%" + txtbusquedasoli.getText() + "%'"
                        + "OR Nombre LIKE '%" + txtbusquedasoli.getText() + "%' OR Puesto LIKE '%" + txtbusquedasoli.getText() + "%' OR Fecha_salida LIKE '%" + txtbusquedasoli.getText() + "%' OR Fecha_llegada LIKE '%" + txtbusquedasoli.getText() + "%'"
                        + "OR Lugar LIKE '%" + txtbusquedasoli.getText() + "%' OR Pernoctado LIKE '%" + txtbusquedasoli.getText() + "%' OR Actividad LIKE '%" + txtbusquedasoli.getText() + "%' OR Vehiculo LIKE '%" + txtbusquedasoli.getText() + "%' OR Estado LIKE '%" + txtbusquedasoli.getText() + "%'");

                String solicitud[] = new String[10];
                while (rs.next()) {
                    solicitud[0] = rs.getString("idSolicitud");
                    solicitud[1] = rs.getString("Nombre");
                    solicitud[2] = rs.getString("Puesto");
                    solicitud[3] = rs.getString("Fecha_salida");
                    solicitud[4] = rs.getString("Fecha_llegada");
                    solicitud[5] = rs.getString("Lugar");
                    solicitud[6] = rs.getString("Pernoctado");
                    solicitud[7] = rs.getString("Actividad");
                    solicitud[8] = rs.getString("Vehiculo");
                    solicitud[9] = rs.getString("Estado");
                    modelo.addRow(solicitud);
                }

            } catch (SQLException ex) {
                javax.swing.JOptionPane.showMessageDialog(null, "Error en la consulta");

            }
        } else {
            modelo = new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return false;
                }
            };
            modelo.addColumn("ID");
            modelo.addColumn("Nombre");
            modelo.addColumn("Puesto");
            modelo.addColumn("Fecha de salida");
            modelo.addColumn("Fecha de llegada");
            modelo.addColumn("Lugar");
            this.tablasolicvehiculo.setModel(modelo);
            try {

                Statement sentencia = cn.createStatement();

                ResultSet rs = sentencia.executeQuery("SELECT idSolicitud, Nombre, Puesto, Fecha_salida, Fecha_llegada,Lugar FROM solicitud_vehiculo WHERE idSolicitud LIKE '%" + txtbusquedasoli.getText() + "%'"
                        + "OR Nombre LIKE '%" + txtbusquedasoli.getText() + "%' OR Puesto LIKE '%" + txtbusquedasoli.getText() + "%' OR Fecha_salida LIKE '%" + txtbusquedasoli.getText() + "%' OR Fecha_llegada LIKE '%" + txtbusquedasoli.getText() + "%'"
                        + "OR Lugar LIKE '%" + txtbusquedasoli.getText() + "%'");

                String solicitud[] = new String[6];
                while (rs.next()) {
                    solicitud[0] = rs.getString("idSolicitud");
                    solicitud[1] = rs.getString("Nombre");
                    solicitud[2] = rs.getString("Puesto");
                    solicitud[3] = rs.getString("Fecha_salida");
                    solicitud[4] = rs.getString("Fecha_llegada");
                    solicitud[5] = rs.getString("Lugar");
                    modelo.addRow(solicitud);
                }

            } catch (SQLException ex) {
                javax.swing.JOptionPane.showMessageDialog(null, "Error en la consulta");

            }
        }
    }//GEN-LAST:event_txtbusquedasoliKeyReleased

    private void txtbusquedasoliKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbusquedasoliKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtbusquedasoliKeyPressed

    private void tablasolicvehiculoMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablasolicvehiculoMouseReleased
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {
            int r = tablasolicvehiculo.rowAtPoint(evt.getPoint());
            if (r >= 0 && r < tablasolicvehiculo.getRowCount()) {
                tablasolicvehiculo.setRowSelectionInterval(r, r);
            }
            MenuSolicitudViaticos.show(evt.getComponent(), evt.getX(), evt.getY());//Mostramos el popMenu en la posición donde esta el cursor

        }//clic derecho
    }//GEN-LAST:event_tablasolicvehiculoMouseReleased

    private void tablasolicvehiculoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablasolicvehiculoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tablasolicvehiculoMouseClicked

    private void jScrollPane11MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane11MouseReleased
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {
            MenuPanelSolicitudViatico.show(evt.getComponent(), evt.getX(), evt.getY());//Mostramos el popMenu en la posición donde esta el cursor
        }//clic derecho
    }//GEN-LAST:event_jScrollPane11MouseReleased

    private void tablasolicMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablasolicMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tablasolicMouseClicked

    private void tablasolicMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablasolicMouseReleased
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {
            int r = tablasolic.rowAtPoint(evt.getPoint());
            if (r >= 0 && r < tablasolic.getRowCount()) {
                tablasolic.setRowSelectionInterval(r, r);
            }
            MenuSolicitudViaticos1.show(evt.getComponent(), evt.getX(), evt.getY());//Mostramos el popMenu en la posición donde esta el cursor

        }//clic derecho
    }//GEN-LAST:event_tablasolicMouseReleased

    private void CancelarPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarPActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("actualizar", "Tablon Solicitudes", Principal.Username)) {
            int i = tablonpendientes.getSelectedRow();
            if (i >= 0) {
                String id = tablonpendientes.getValueAt(i, 0).toString();
                String motivo = javax.swing.JOptionPane.showInputDialog("Motivo");
                if (motivo == null) {
                } else {
                    try {
                        Statement sentencia = cn.createStatement();
                        sentencia.executeUpdate("UPDATE Solicitud_viatico SET Estado = 'C', Motivo= '" + motivo + "' WHERE (idSolicitud = '" + id + "')");
                        javax.swing.JOptionPane.showMessageDialog(null, "Solicitud cancelada");
                    } catch (SQLException ex) {
                        javax.swing.JOptionPane.showMessageDialog(null, "Error en la consulta");

                    }
                    /*catch (ClassNotFoundException e) {
                     e.printStackTrace();
                     }//fin del catch
                     */

                }
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar solicitud");
            }
            tabloncanceladas.setModel(manager_soviaticos.SolicitudC());
            tablonpendientes.setModel(manager_soviaticos.SolicitudP());
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para cancelar solicitudes.");
        }
    }//GEN-LAST:event_CancelarPActionPerformed

    private void jScrollPane12MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane12MouseReleased
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {
            MenuPanelSolicitudViatico.show(evt.getComponent(), evt.getX(), evt.getY());//Mostramos el popMenu en la posición donde esta el cursor
        }//clic derecho
    }//GEN-LAST:event_jScrollPane12MouseReleased

    private void solicitudviaticos1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_solicitudviaticos1MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_solicitudviaticos1MouseReleased

    private void tablonsolicitud1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablonsolicitud1MouseReleased
        // TODO add your handling code here:

    }//GEN-LAST:event_tablonsolicitud1MouseReleased

    private void solipendientesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_solipendientesMouseReleased
        // TODO add your handling code here:

    }//GEN-LAST:event_solipendientesMouseReleased

    private void soliaceptadasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_soliaceptadasMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_soliaceptadasMouseReleased

    private void solicarchivadasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_solicarchivadasMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_solicarchivadasMouseReleased

    private void txtbusquedasoli1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbusquedasoli1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtbusquedasoli1KeyPressed

    private void txtbusquedasoli1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbusquedasoli1KeyReleased
        // TODO add your handling code here:
        if (menutablones.getSelectedIndex() == 0) {
            modelo = new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return false;
                }
            };
            modelo.addColumn("ID");
            modelo.addColumn("Nombre");
            modelo.addColumn("Puesto");
            modelo.addColumn("Fecha de salida");
            modelo.addColumn("Fecha de llegada");
            modelo.addColumn("Lugar");
            this.tablonpendientes.setModel(modelo);
            try {

                Statement sentencia = cn.createStatement();

                ResultSet rs = sentencia.executeQuery("SELECT idSolicitud, Nombre, Puesto, Fecha_salida, Fecha_llegada,Lugar FROM Solicitud_viatico WHERE Estado = 'P' AND (idSolicitud LIKE '%" + txtbusquedasoli1.getText() + "%'"
                        + "OR Nombre LIKE '%" + txtbusquedasoli1.getText() + "%' OR Puesto LIKE '%" + txtbusquedasoli1.getText() + "%' OR Fecha_salida LIKE '%" + txtbusquedasoli1.getText() + "%' OR Fecha_llegada LIKE '%" + txtbusquedasoli1.getText() + "%'"
                        + "OR Lugar LIKE '%" + txtbusquedasoli1.getText() + "%') ");

                String solicitud[] = new String[6];
                while (rs.next()) {
                    solicitud[0] = rs.getString("idSolicitud");
                    solicitud[1] = rs.getString("Nombre");
                    solicitud[2] = rs.getString("Puesto");
                    solicitud[3] = rs.getString("Fecha_salida");
                    solicitud[4] = rs.getString("Fecha_llegada");
                    solicitud[5] = rs.getString("Lugar");
                    modelo.addRow(solicitud);
                }

            } catch (SQLException ex) {
                javax.swing.JOptionPane.showMessageDialog(null, "Error en la consulta");

            }
        }
        if (menutablones.getSelectedIndex() == 1) {
            modelo = new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return false;
                }
            };
            modelo.addColumn("Folio");
            modelo.addColumn("Monto");
            modelo.addColumn("Fecha de salida");
            modelo.addColumn("Fecha de llegada");
            modelo.addColumn("Lugar");
            this.tablonaceptadas.setModel(modelo);
            try {

                Statement sentencia = cn.createStatement();

                ResultSet rs = sentencia.executeQuery("SELECT O.Folio, O.Monto, S.Fecha_salida, S.Fecha_llegada,S.Lugar FROM Solicitud_viatico S, Oficio_comision O WHERE S.Estado = 'A' AND S.idSolicitud = O.Solicitud_idSolicitud AND (O.Folio LIKE '%" + txtbusquedasoli1.getText() + "%'"
                        + "%' OR O.Monto LIKE '%" + txtbusquedasoli1.getText() + "%' OR S.Fecha_salida LIKE '%" + txtbusquedasoli1.getText() + "%' OR S.Fecha_llegada LIKE '%" + txtbusquedasoli1.getText() + "%'"
                        + "OR S.Lugar LIKE '%" + txtbusquedasoli1.getText() + "%') ");

                String solicitud[] = new String[5];
                while (rs.next()) {
                    solicitud[0] = rs.getString("Folio");
                    solicitud[1] = rs.getString("Monto");
                    solicitud[2] = rs.getString("Fecha_salida");
                    solicitud[3] = rs.getString("Fecha_llegada");
                    solicitud[4] = rs.getString("Lugar");
                    modelo.addRow(solicitud);
                }

            } catch (SQLException ex) {
                javax.swing.JOptionPane.showMessageDialog(null, "Error en la consulta");

            }
        }
        if (menutablones.getSelectedIndex() == 2) {
            tablonarchivadas.setModel(SolicitudArB());
        }
        if (menutablones.getSelectedIndex() == 3) {
            modelo = new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return false;
                }
            };
            modelo.addColumn("ID");
            modelo.addColumn("Nombre");
            modelo.addColumn("Puesto");
            modelo.addColumn("Fecha de salida");
            modelo.addColumn("Fecha de llegada");
            modelo.addColumn("Lugar");
            modelo.addColumn("Motivo");
            this.tabloncanceladas.setModel(modelo);
            try {

                Statement sentencia = cn.createStatement();

                ResultSet rs = sentencia.executeQuery("SELECT idSolicitud, Nombre, Puesto, Fecha_salida, Fecha_llegada,Lugar, Motivo FROM Solicitud_viatico WHERE Estado = 'C' AND (idSolicitud LIKE '%" + txtbusquedasoli1.getText() + "%'"
                        + "OR Nombre LIKE '%" + txtbusquedasoli1.getText() + "%' OR Puesto LIKE '%" + txtbusquedasoli1.getText() + "%' OR Fecha_salida LIKE '%" + txtbusquedasoli1.getText() + "%' OR Fecha_llegada LIKE '%" + txtbusquedasoli1.getText() + "%'"
                        + "OR Lugar LIKE '%" + txtbusquedasoli1.getText() + "%' OR Motivo LIKE '%" + txtbusquedasoli1.getText() + "%') order by idSolicitud DESC");

                String solicitud[] = new String[7];
                while (rs.next()) {
                    solicitud[0] = rs.getString("idSolicitud");
                    solicitud[1] = rs.getString("Nombre");
                    solicitud[2] = rs.getString("Puesto");
                    solicitud[3] = rs.getString("Fecha_salida");
                    solicitud[4] = rs.getString("Fecha_llegada");
                    solicitud[5] = rs.getString("Lugar");
                    solicitud[6] = rs.getString("Motivo");
                    modelo.addRow(solicitud);
                }

            } catch (SQLException ex) {
                javax.swing.JOptionPane.showMessageDialog(null, "Error en la consulta");

            }
        }
    }//GEN-LAST:event_txtbusquedasoli1KeyReleased

    private void CancelarAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarAActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("actualizar", "Tablon Solicitudes", Principal.Username)) {
            int i = tablonaceptadas.getSelectedRow();
            if (i >= 0) {
                String folio = tablonaceptadas.getValueAt(i, 0).toString();
                String idSolicitud = "";
                try {
                    Class.forName("com.mysql.jdbc.Driver");

                    Statement sentencia = cn.createStatement();
                    ResultSet rs = sentencia.executeQuery("SELECT Solicitud_idSolicitud FROM Oficio_comision WHERE Folio = '" + folio + "'");
                    while (rs.next()) {
                        idSolicitud = rs.getString("Solicitud_idSolicitud");
                    }
                    String motivo = javax.swing.JOptionPane.showInputDialog("Motivo");
                    if (motivo == null) {

                    } else {
                        sentencia.executeUpdate("UPDATE Solicitud_viatico SET Estado = 'C', Motivo = '" + motivo + "' WHERE (idSolicitud = " + idSolicitud + ")");
                        javax.swing.JOptionPane.showMessageDialog(null, "Solicitud cancelada");
                    }
                } catch (SQLException ex) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Error en la consulta");

                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                }//fin del catch

            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar solicitud");
            }
            tabloncanceladas.setModel(manager_soviaticos.SolicitudC());
            tablonaceptadas.setModel(manager_soviaticos.SolicitudA());
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para cancelar solicitudes.");
        }
    }//GEN-LAST:event_CancelarAActionPerformed

    private void solipendientesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_solipendientesKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_solipendientesKeyPressed

    private void tablonsolicitud1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablonsolicitud1KeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_tablonsolicitud1KeyPressed

    private void solipendientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_solipendientesMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_solipendientesMouseClicked

    private void btnregresar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnregresar1ActionPerformed
        // TODO add your handling code here:
        int s = JOptionPane.showConfirmDialog(null, "¿Esta seguro?", "Alerta!", JOptionPane.YES_NO_OPTION);
        if (s == JOptionPane.YES_OPTION) {
            btnregresar1.setVisible(false);
            txtobvia.setText("");
            txtobveh.setText("");
            GaTot.setText("");
            txtobvia.enable(false);
            txtobveh.enable(false);
            txtobvia.setVisible(false);
            txtobveh.setVisible(false);
            btnregresar.setVisible(false);
            btnguardar.setVisible(false);
            tablainfo.enable(true);
            jlb.setVisible(true);
            txtbusquedasoli2.setVisible(true);
            jLabel1.setVisible(false);
            lblObsVehiculo.setVisible(false);
            jLabel3.setVisible(false);
            GaTot.enable(false);
            GaTot.setVisible(false);
            jScrollPane3.setVisible(false);
            jScrollPane1.setVisible(true);
            Solicitud("SELECT O.Folio, S.Nombre, S.Actividad, S.Lugar, O.Monto FROM Solicitud_viatico S, Oficio_comision O WHERE S.Estado = 'AR' AND S.Reporte = '0' AND S.idSolicitud = O.Solicitud_idSolicitud AND O.Monto != 0");
            SolicitudR("SELECT I.Id_Informe, O.FOLIO, S.Nombre, O.Monto, I.importe_total FROM Solicitud_viatico S, Oficio_comision O, Informe I WHERE S.Estado = 'AR' AND S.Reporte = '1' AND S.idSolicitud = O.Solicitud_idSolicitud AND I.Solicitud_idSolicitud = S.idSolicitud AND O.Monto != 0 ORDER BY I.Id_Informe DESC");
        } else {
        }
    }//GEN-LAST:event_btnregresar1ActionPerformed

    private void tablainfoMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablainfoMouseReleased
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {
            int r = tablainfo.rowAtPoint(evt.getPoint());
            if (r >= 0 && r < tablainfo.getRowCount()) {
                tablainfo.setRowSelectionInterval(r, r);
            }
            MenuInfSA.show(evt.getComponent(), evt.getX(), evt.getY());//Mostramos el popMenu en la posición donde esta el cursor
        }//clic derecho
    }//GEN-LAST:event_tablainfoMouseReleased

    private void tablaactMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaactMouseReleased
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {
            int r = tablaact.rowAtPoint(evt.getPoint());
            if (r >= 0 && r < tablaact.getRowCount()) {
                tablaact.setRowSelectionInterval(r, r);
            }
            MenuGI.show(evt.getComponent(), evt.getX(), evt.getY());//Mostramos el popMenu en la posición donde esta el cursor
        }//clic derecho
    }//GEN-LAST:event_tablaactMouseReleased

    private void tablainfo1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablainfo1MouseReleased
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {
            int r = tablainfo1.rowAtPoint(evt.getPoint());
            if (r >= 0 && r < tablainfo1.getRowCount()) {
                tablainfo1.setRowSelectionInterval(r, r);
            }
            MenuInfSF.show(evt.getComponent(), evt.getX(), evt.getY());//Mostramos el popMenu en la posición donde esta el cursor
        }//clic derecho
    }//GEN-LAST:event_tablainfo1MouseReleased

    private void GenerarInfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerarInfActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("alta", "Informe", Principal.Username)) {
            int k = tablainfo.getSelectedRow();
            folio = 0;
            if (k >= 0) {
                folio = Integer.parseInt(tablainfo.getValueAt(k, 0).toString());
                int filas = tablainfo.getRowCount();
                modelo = new DefaultTableModel();
                modelo.addColumn("Descripción");
                modelo.addColumn("Precio");
                modelo.addColumn("# Factura");
                this.tablaact.setModel(modelo);
                txtobvia.enable(true);
                txtobvia.setVisible(true);
                btnregresar1.setVisible(true);

                try {
                    Statement sentencia = cn.createStatement();
                    String gastos_comprobar = "";
                    ResultSet rs = sentencia.executeQuery("SELECT S.gastos_comprobar FROM Solicitud_viatico S, Oficio_comision O WHERE S.Estado = 'AR' AND S.Reporte = '0' AND S.idSolicitud = O.Solicitud_idSolicitud AND O.Folio = " + folio);
                    while (rs.next()) {
                        gastos_comprobar = rs.getString("gastos_comprobar");
                    }
                    if (gastos_comprobar.equals("true")) {
                        jScrollPane3.setVisible(true);
                        GaTot.enable(true);
                        GaTot.setVisible(true);
                        jLabel3.setVisible(true);
                        c = 1;
                    } else {
                        jScrollPane3.setVisible(false);
                        GaTot.enable(false);
                        GaTot.setVisible(false);
                        jLabel3.setVisible(false);
                        c = 0;
                    }
                    rs=cbd.getTabla("select * from oficio_comision OC inner join solicitud_viatico SVI on OC.Solicitud_idSolicitud=SVI.idSolicitud inner join vehiculo_viatico VV on SVI.idSolicitud=VV.solicitud_viatico_idSolicitud inner join solicitud_vehiculo SV on VV.solicitud_vehiculo_idsolicitud_vehiculo=SV.idsolicitud_vehiculo where OC.Folio="+folio, cn);
                    boolean bloquearVehiculo=true;
                    while(rs.next()){
                        bloquearVehiculo=false;
                        if(rs.getString("chofer")!=null){
                            txtobveh.enable(true);
                            txtobveh.setVisible(true);
                            txtKilometraje.setVisible(true);
                            lblKilometraje.setVisible(true);
                            lblObsVehiculo.setVisible(true);
                        }else{
                            txtobveh.enable(false);
                            txtobveh.setVisible(false);
                            txtKilometraje.setVisible(false);
                            lblKilometraje.setVisible(false);
                            lblObsVehiculo.setVisible(false);
                        }
                    }
                    if(bloquearVehiculo){
                        txtobveh.enable(false);
                        txtobveh.setVisible(false);
                        txtKilometraje.setVisible(false);
                        lblKilometraje.setVisible(false);
                        lblObsVehiculo.setVisible(false);
                    }
                    btnregresar.setVisible(true);
                    btnguardar.setVisible(true);
                    jlb.setVisible(false);
                    txtbusquedasoli2.setVisible(false);
                    jLabel1.setVisible(true);
                    jScrollPane1.setVisible(false);
                } catch (SQLException ex) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Error en la consulta");
                }
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar solicitud");
            }
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para realizar el informe de actividades.");
        }
    }//GEN-LAST:event_GenerarInfActionPerformed

    private void jScrollPane3MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane3MouseReleased
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {
            int r = tablaact.rowAtPoint(evt.getPoint());
            if (r >= 0 && r < tablaact.getRowCount()) {
                tablaact.setRowSelectionInterval(r, r);
            }
            MenuGI.show(evt.getComponent(), evt.getX(), evt.getY());//Mostramos el popMenu en la posición donde esta el cursor
        }//clic derecho
    }//GEN-LAST:event_jScrollPane3MouseReleased

    private void ConsultarInfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsultarInfActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("consulta", "Informe", Principal.Username)) {
            try {
                int k = tablainfo1.getSelectedRow();
                String idInforme = "";
                if (k >= 0) {
                    idInforme = tablainfo1.getValueAt(k, 0).toString();
                    pdf.reporte(idInforme);
                } else {
                    javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar Informe");
                }
            } catch (DocumentException ex) {
                Logger.getLogger(PrincipalS.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(PrincipalS.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para imprimir solicitudes de viáticos.");
        }
    }//GEN-LAST:event_ConsultarInfActionPerformed

    private void AñadirAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AñadirAActionPerformed
        // TODO add your handling code here:
        int filas = tablaact.getRowCount();
        if (filas == 0) {
            modelo.addRow(new Object[]{"", "", ""});
        } else if (tablaact.getValueAt(filas - 1, 0) != "" && tablaact.getValueAt(filas - 1, 1) != "") {
            modelo.addRow(new Object[]{"", "", ""});
        }
    }//GEN-LAST:event_AñadirAActionPerformed

    private void EliminarAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarAActionPerformed
        // TODO add your handling code here:
        int i = tablaact.getSelectedRow();
        modelo.removeRow(i);
    }//GEN-LAST:event_EliminarAActionPerformed

    private void AgregarEmpleadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarEmpleadosActionPerformed
        if (manager_permisos.accesoModulo("actualizar", "Solicitud Viaticos", Principal.Username)) {
            try {
                // TODO add your handling code here:
                int fila = tablasolicvehiculo.getSelectedRow();
                String idSolicitud = tablasolicvehiculo.getValueAt(fila, 0) + "";
                String fecha = tablasolicvehiculo.getValueAt(fila, 1) + "";
                ResultSet rs=cbd.getTabla("select * from solicitud_viatico where estado!='AR' and estado!='C' and idSolicitud="+idSolicitud, cn);
                boolean noModificar=true;
                while(rs.next()){
                    noModificar=false;
                    addViaticoVehiculo avv = new addViaticoVehiculo(this, true, idSolicitud, fecha);
                    avv.setVisible(true);
                }
                if(noModificar){
                    JOptionPane.showMessageDialog(this, "No se puede agregar empleados al vehiculo porque la solicitud está cancelada o ya le fue asignada un monto");
                }
            } catch (SQLException ex) {
                Logger.getLogger(PrincipalS.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para agregar empleados a las solicitudes de vehículos.");
        }
    }//GEN-LAST:event_AgregarEmpleadosActionPerformed

    private void ConsultarArActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsultarArActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("consulta", "Tablon Solicitudes", Principal.Username)) {
            if (c == 0) {
                c = 1;
            } else {
                s.setVisible(false);
                c = 1;
            }
            int i = tablonarchivadas.getSelectedRow();
            if (i >= 0) {
                String folio = tablonarchivadas.getValueAt(i, 0).toString();
                String idSolicitud = "";
                try {
                    Statement sentencia = cn.createStatement();
                    ResultSet rs = sentencia.executeQuery("SELECT Solicitud_idSolicitud FROM Oficio_comision WHERE Folio = '" + folio + "'");
                    rs.next();
                    idSolicitud = rs.getString("Solicitud_idSolicitud");

                    s = new visSolicitudViaticos();
                    s.IdUsuario(Integer.parseInt(idSolicitud), 1, 1);
                } catch (SQLException ex) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Error en la consulta");

                }
                /*catch (ClassNotFoundException e) {
                 e.printStackTrace();
                 }//fin del catch*/

                s.setVisible(true);
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar solicitud");
            }
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para consultar las solicitudes.");
        }
    }//GEN-LAST:event_ConsultarArActionPerformed

    private void OficioComisionArActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OficioComisionArActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("consulta", "Tablon Solicitudes", Principal.Username)) {
            int i = tablonarchivadas.getSelectedRow();
            if (i >= 0) {
                String folio = tablonarchivadas.getValueAt(i, 0).toString();
                try {
                    pdf.oficio_comision(folio);
                } catch (DocumentException ex) {
                    Logger.getLogger(PrincipalS.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(PrincipalS.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar solicitud");
            }
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para imprimir las solicitudes.");
        }
    }//GEN-LAST:event_OficioComisionArActionPerformed

    private void OficioViaticoArActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OficioViaticoArActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("consulta", "Tablon Solicitudes", Principal.Username)) {
            int i = tablonarchivadas.getSelectedRow();
            if (i >= 0) {
                String folio = tablonarchivadas.getValueAt(i, 0).toString();
                try {
                    pdf.pdfFolio(folio);
                } catch (DocumentException ex) {
                    Logger.getLogger(PrincipalS.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(PrincipalS.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar solicitud");
            }
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para imprimir las solicitudes.");
        }
    }//GEN-LAST:event_OficioViaticoArActionPerformed

    private void tablonarchivadasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablonarchivadasMouseReleased
        // TODO add your handling code here:
        guardargac.setVisible(true);
        if (SwingUtilities.isRightMouseButton(evt)) {
            int r = tablonarchivadas.rowAtPoint(evt.getPoint());
            if (r >= 0 && r < tablonarchivadas.getRowCount()) {
                tablonarchivadas.setRowSelectionInterval(r, r);
            }
            int k = tablonarchivadas.getSelectedRow();
            if (k >= 0) {
                String folio = tablonarchivadas.getValueAt(k, 0).toString();
                boolean gastosac = (boolean) tablonarchivadas.getValueAt(k, 7);
                String idSolicitud = "";
                try {

                    Statement sentencia = cn.createStatement();
                    ResultSet rs = sentencia.executeQuery("SELECT Solicitud_idSolicitud FROM Oficio_comision WHERE Folio = '" + folio + "'");
                    while (rs.next()) {
                        idSolicitud = rs.getString("Solicitud_idSolicitud");
                    }
                    sentencia.executeUpdate("UPDATE Solicitud_viatico SET gastos_comprobar = '" + gastosac + "' WHERE (idSolicitud = " + idSolicitud + ")");
                    //javax.swing.JOptionPane.showMessageDialog(null, "Gastos a comprobar");

                } catch (SQLException ex) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Error en la consulta");

                } catch (NumberFormatException exp) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Ingresar solo números");
                }//fin del catch

            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar solicitud");
            }
            MenuTablonAr.show(evt.getComponent(), evt.getX(), evt.getY());//Mostramos el popMenu en la posición donde esta el cursor
        }//clic derecho
    }//GEN-LAST:event_tablonarchivadasMouseReleased

    private void jScrollPane4MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane4MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane4MouseReleased

    private void tablaactFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tablaactFocusLost
        // TODO add your handling code here:

    }//GEN-LAST:event_tablaactFocusLost

    private void tablaactFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tablaactFocusGained
        // TODO add your handling code here:
        //suma de precio o costo
        int valor = 0;
        int filas = tablaact.getRowCount();
        if (filas != 0) {
            for (int j = 0; filas > j; j++) {
                if (tablaact.getValueAt(j, 1) != null || tablaact.getValueAt(j, 1) != "") {
                    valor = valor + Integer.parseInt(tablaact.getValueAt(j, 1) + "");
                }
            }
        }
        GaTot.setText(valor + "");
    }//GEN-LAST:event_tablaactFocusGained

    private void tabloncanceladasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabloncanceladasMouseReleased
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {
            int r = tabloncanceladas.rowAtPoint(evt.getPoint());
            if (r >= 0 && r < tabloncanceladas.getRowCount()) {
                tabloncanceladas.setRowSelectionInterval(r, r);
            }
            MenuTablonC.show(evt.getComponent(), evt.getX(), evt.getY());//Mostramos el popMenu en la posición donde esta el cursor
        }//clic derecho
    }//GEN-LAST:event_tabloncanceladasMouseReleased

    private void solicanceladasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_solicanceladasMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_solicanceladasMouseReleased

    private void mi_pasesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mi_pasesActionPerformed
        // TODO add your handling code here:
        try {
            PrincipalP a = new PrincipalP();
            a.setVisible(true);
            this.dispose();
        } catch (Exception ex) { 
            Logger.getLogger(PrincipalS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mi_pasesActionPerformed

    private void guardargacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardargacActionPerformed
        // TODO add your handling code here:
        int k = tablonarchivadas.getSelectedRow();
        if (k >= 0) {
            String folio = tablonarchivadas.getValueAt(k, 0).toString();
            boolean gastosac = (boolean) tablonarchivadas.getValueAt(k, 7);
            String idSolicitud = "";
            try {
                Statement sentencia = cn.createStatement();
                ResultSet rs = sentencia.executeQuery("SELECT Solicitud_idSolicitud FROM Oficio_comision WHERE Folio = '" + folio + "'");
                while (rs.next()) {
                    idSolicitud = rs.getString("Solicitud_idSolicitud");
                }
                sentencia.executeUpdate("UPDATE Solicitud_viatico SET gastos_comprobar = '" + gastosac + "' WHERE (idSolicitud = " + idSolicitud + ")");
                javax.swing.JOptionPane.showMessageDialog(null, "Gastos a comprobar guardados");
                Solicitud("SELECT O.Folio, S.Nombre, S.Actividad, S.Lugar, O.Monto FROM Solicitud_viatico S, Oficio_comision O WHERE S.Estado = 'AR' AND S.Reporte = '0' AND S.idSolicitud = O.Solicitud_idSolicitud AND O.Monto != 0");
            } catch (SQLException ex) {
                javax.swing.JOptionPane.showMessageDialog(null, "Error en la consulta");

            } catch (NumberFormatException exp) {
                javax.swing.JOptionPane.showMessageDialog(null, "Ingresar solo números");
            }//fin del catch
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar solicitud");
        }
    }//GEN-LAST:event_guardargacActionPerformed

    private void guardargacFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_guardargacFocusLost
        // TODO add your handling code here:
        guardargac.setVisible(false);
    }//GEN-LAST:event_guardargacFocusLost

    private void tablonsolicitud1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tablonsolicitud1FocusLost
        // TODO add your handling code here:
        guardargac.setVisible(false);
    }//GEN-LAST:event_tablonsolicitud1FocusLost

    private void ArchivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArchivarActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("actualizar", "Tablon Solicitudes", Principal.Username)) {
            int k = tablonaceptadas.getSelectedRow();
            if (k >= 0) {
                String folio = tablonaceptadas.getValueAt(k, 0).toString();
                String idSolicitud = "";
                try {

                    Statement sentencia = cn.createStatement();
                    ResultSet rs = sentencia.executeQuery("SELECT Solicitud_idSolicitud FROM Oficio_comision WHERE Folio = '" + folio + "'");
                    while (rs.next()) {
                        idSolicitud = rs.getString("Solicitud_idSolicitud");
                    }
                    sentencia.executeUpdate("UPDATE Solicitud_viatico SET Estado = 'AR', gastos_comprobar = 'false' WHERE (idSolicitud = " + idSolicitud + ")");
                    javax.swing.JOptionPane.showMessageDialog(null, "Solicitud archivada");
                } catch (SQLException ex) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Error en la consulta");

                } catch (NumberFormatException exp) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Ingresar solo números");
                }//fin del catch

            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Seleccionar solicitud");
            }
            tablonarchivadas.setModel(manager_soviaticos.SolicitudAr());
            tablonaceptadas.setModel(manager_soviaticos.SolicitudA());
            Solicitud("SELECT O.Folio, S.Nombre, S.Actividad, S.Lugar, O.Monto FROM Solicitud_viatico S, Oficio_comision O WHERE S.Estado = 'AR' AND S.Reporte = '0' AND S.idSolicitud = O.Solicitud_idSolicitud AND O.Monto != 0");
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para archivar solicitudes.");
        }
    }//GEN-LAST:event_ArchivarActionPerformed

    private void Impri_Sol1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Impri_Sol1ActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("consulta", "Solicitud Viaticos", Principal.Username)) {
            int fila = tablasolic.getSelectedRow();;
            limpiar = false;
            String id = null;
            try {

                tablasolic.clearSelection();
                CrearPDF pdf = new CrearPDF();
                if (fila >= 0) {
                    id = tablasolic.getValueAt(fila, 0).toString();
                    pdf.generarPDFSolicitud(id);
                }
            } catch (Exception e) {

            }
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para imprimir solicitudes de viáticos.");
        }
    }//GEN-LAST:event_Impri_Sol1ActionPerformed

    private void Add2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add2ActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("alta", "Solicitud Viaticos", Principal.Username)) {
            addSolicitudViaticos asv = new addSolicitudViaticos(this, true);
            conVehiculo = 0;
            asv.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para realizar solicitudes de viáticos.");
        }
    }//GEN-LAST:event_Add2ActionPerformed

    private void SolicitarVehiculo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SolicitarVehiculo2ActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("alta", "Solicitud Viaticos", Principal.Username)) {
            addSolicitudViaticos asv = new addSolicitudViaticos(this, true);
            conVehiculo = 1;
            asv.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para realizar solicitudes de vehículos.");
        }
    }//GEN-LAST:event_SolicitarVehiculo2ActionPerformed

    private void CambiarConsejero2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CambiarConsejero2ActionPerformed
        // TODO add your handling code here:
        if (manager_permisos.accesoModulo("actualizar", "Solicitud Viaticos", Principal.Username)) {
            String nuevo = JOptionPane.showInputDialog("Inserte el nombre del nuevo director general");
            cbd.ejecutar("update Director_General set Nombre='" + nuevo + "'");
        }else{
            JOptionPane.showMessageDialog(null, "Usted no cuenta con permisos para modificar el nombre del consejero presidente.");
        }
    }//GEN-LAST:event_CambiarConsejero2ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        Object[] botones = {"Confirmar","Cerrar Sesión","Cancelar"};
        int opcion = JOptionPane.showOptionDialog(this,"¿Salir del Sistema?", "Confirmación",
                JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE  , null, botones, botones[0]);
        
        if(opcion == 0){
            
            System.exit(0);
        }else if(opcion == 1){
            //Cerrar sesion
            this.dispose();
            Login ob = new Login();
            ob.setVisible(true);   
        }
    }//GEN-LAST:event_formWindowClosing

    public void Solicitud(String s) {
        modelo = new DefaultTableModel() {
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };
        modelo.addColumn("Folio");
        modelo.addColumn("Nombre");
        modelo.addColumn("Actividad");
        modelo.addColumn("Lugar");
        modelo.addColumn("Monto");
        this.tablainfo.setModel(modelo);
        try {
            Statement sentencia = cn.createStatement();
            ResultSet rs = sentencia.executeQuery(s);
            String solicitud[] = new String[5];
            while (rs.next()) {
                solicitud[0] = rs.getString("Folio");
                solicitud[1] = rs.getString("Nombre");
                solicitud[2] = rs.getString("Actividad");
                solicitud[3] = rs.getString("Lugar");
                solicitud[4] = rs.getString("Monto");
                modelo.addRow(solicitud);
            }
        } catch (SQLException ex) {
            javax.swing.JOptionPane.showMessageDialog(null, "Error en la consultaA");
        }
    }

    public void SolicitudR(String s) {
        modelo = new DefaultTableModel() {
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };
        modelo.addColumn("ID Informe");
        modelo.addColumn("Folio");
        modelo.addColumn("Nombre");
        modelo.addColumn("Monto");
        modelo.addColumn("Importe total");
        this.tablainfo1.setModel(modelo);
        try {
            Statement sentencia = cn.createStatement();
            ResultSet rs = sentencia.executeQuery(s);
            String solicitud[] = new String[5];
            while (rs.next()) {
                solicitud[0] = rs.getString("Id_Informe");
                solicitud[1] = rs.getString("Folio");
                solicitud[2] = rs.getString("Nombre");
                solicitud[3] = rs.getString("Monto");
                solicitud[4] = rs.getString("importe_total");
                modelo.addRow(solicitud);
            }

        } catch (SQLException ex) {
            javax.swing.JOptionPane.showMessageDialog(null, "Error en la consultaF");

        }
    }

    public DefaultTableModel SolicitudArB() {
        JTable checks = new JTable();//{  public boolean isCellEditable(int rowIndex, int colIndex){ if(colIndex == 0){return true;} else{return false; } }  };
        JScrollPane scroll = new JScrollPane();
        DefaultTableModel table = new DefaultTableModel();

        //Creamos la tabla con las caracterisiticas que necesitamos
        checks.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        checks.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                //Declaramos el titulo de las columnas
                new String[]{
                    "Folio ", "Monto", "Fecha de salida", "Fecha de llegada", "Lugar", "Gastos a comprobar", "Informe"
                }
        ) {
            //El tipo que sera cada columna, la primera columna un checkbox y los demas seran objetos
            Class[] types = new Class[]{
                java.lang.Object.class,
                java.lang.Object.class,
                java.lang.Object.class,
                java.lang.Object.class,
                java.lang.Object.class,
                java.lang.Boolean.class,
                java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
            //Esto es para indicar que columnas dejaremos editar o no
            boolean[] canEdit = new boolean[]{
                false,
                false,
                false,
                false,
                false,
                true,
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }

        }
        );
        //Agregamos un scroll a la tabla
        scroll.setViewportView(checks);
        scroll.setBounds(30, 130, 1110, 500);

        table = (DefaultTableModel) checks.getModel();

        try {
            //conexion = db.getConexion();
            String sql = "SELECT O.Folio, O.Monto, S.Fecha_salida, S.Fecha_llegada,S.Lugar,S.gastos_comprobar,S.Reporte FROM Solicitud_viatico S, Oficio_comision O WHERE S.Estado = 'AR' AND S.idSolicitud = O.Solicitud_idSolicitud AND (O.Folio LIKE '%" + txtbusquedasoli1.getText() + "%'"
                    + "OR O.Monto LIKE '%" + txtbusquedasoli1.getText() + "%' OR S.Fecha_salida LIKE '%" + txtbusquedasoli1.getText() + "%' OR S.Fecha_llegada LIKE '%" + txtbusquedasoli1.getText() + "%' OR S.Lugar LIKE '%" + txtbusquedasoli1.getText() + "%'"
                    + "OR S.gastos_comprobar LIKE '%" + txtbusquedasoli1.getText() + "%' OR S.Reporte LIKE '%" + txtbusquedasoli1.getText() + "%')ORDER BY O.FOLIO DESC";
            Statement sentencia = cn.createStatement();
            Object datos[] = new Object[7];
            ResultSet rs = sentencia.executeQuery(sql);
            //Llenar tabla
            while (rs.next()) {

                for (int i = 0; i < 7; i++) {
                    if (i == 5) {
                        datos[i] = rs.getBoolean(i + 1);
                    } else {
                        datos[i] = rs.getObject(i + 1);
                    }

                }//Llenamos las columnas por registro

                table.addRow(datos);//Añadimos la fila
            }//while
            //cn.close();

        } catch (SQLException ex) {
            javax.swing.JOptionPane.showMessageDialog(null, "Error en la consulta de Solicitudes Archivadas");

        } finally {

            return table;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrincipalS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrincipalS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrincipalS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrincipalS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrincipalS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AceptarC;
    private javax.swing.JMenuItem AceptarP;
    private javax.swing.JMenuItem Add;
    private javax.swing.JMenuItem Add1;
    private javax.swing.JMenuItem Add2;
    private javax.swing.JMenuItem AgregarEmpleados;
    private javax.swing.JMenuItem Archivar;
    private javax.swing.JMenuItem AsignarMonto;
    private javax.swing.JMenuItem AñadirA;
    private javax.swing.JMenuItem CambiarConsejero;
    private javax.swing.JMenuItem CambiarConsejero1;
    private javax.swing.JMenuItem CambiarConsejero2;
    private javax.swing.JMenuItem CancelarA;
    private javax.swing.JMenuItem CancelarP;
    private javax.swing.JMenuItem ConsultarA;
    private javax.swing.JMenuItem ConsultarAr;
    private javax.swing.JMenuItem ConsultarC;
    private javax.swing.JMenuItem ConsultarInf;
    private javax.swing.JMenuItem ConsultarP;
    private javax.swing.JMenuItem EliminarA;
    private javax.swing.JTextField GaTot;
    private javax.swing.JMenuItem GenerarInf;
    private javax.swing.JMenuItem Impri_Sol;
    private javax.swing.JMenuItem Impri_Sol1;
    private javax.swing.JPopupMenu MenuGI;
    private javax.swing.JPopupMenu MenuInfSA;
    private javax.swing.JPopupMenu MenuInfSF;
    private javax.swing.JPopupMenu MenuPanelSolicitudViatico;
    private javax.swing.JMenuItem MenuSolicitud;
    private javax.swing.JPopupMenu MenuSolicitudViaticos;
    private javax.swing.JPopupMenu MenuSolicitudViaticos1;
    private javax.swing.JPopupMenu MenuTablonA;
    private javax.swing.JPopupMenu MenuTablonAr;
    private javax.swing.JPopupMenu MenuTablonC;
    private javax.swing.JPopupMenu MenuTablonP;
    private javax.swing.JMenuItem OficioComision;
    private javax.swing.JMenuItem OficioComisionAr;
    private javax.swing.JMenuItem OficioViaticoAr;
    private javax.swing.JMenuItem SolicitarVehiculo;
    private javax.swing.JMenuItem SolicitarVehiculo1;
    private javax.swing.JMenuItem SolicitarVehiculo2;
    private javax.swing.JButton btnAddInventario2;
    private javax.swing.JButton btnguardar;
    private javax.swing.JButton btnregresar;
    private javax.swing.JButton btnregresar1;
    private javax.swing.JButton guardargac;
    private javax.swing.JPanel informe;
    private javax.swing.JMenuItem itemAnterior;
    private javax.swing.JMenuItem itemSalir;
    private javax.swing.JMenuItem itemSiguiente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel jlb;
    private javax.swing.JLabel lblKilometraje;
    private javax.swing.JLabel lblObsVehiculo;
    private javax.swing.JTabbedPane menuInforme;
    private javax.swing.JMenu menuOpciones;
    private javax.swing.JMenuItem menuPermisos;
    private javax.swing.JMenuItem menuPuestoArea;
    private javax.swing.JTabbedPane menutablones;
    private javax.swing.JMenuItem mi_inventario;
    private javax.swing.JMenuItem mi_pases;
    private javax.swing.JPanel soliaceptadas;
    private javax.swing.JPanel solicanceladas;
    private javax.swing.JPanel solicarchivadas;
    private javax.swing.JPanel solicitudviaticos1;
    public static javax.swing.JTabbedPane solicviaticos;
    private javax.swing.JPanel solipendientes;
    private javax.swing.JTable tablaact;
    private javax.swing.JTable tablainfo;
    private javax.swing.JTable tablainfo1;
    public static javax.swing.JTable tablasolic;
    public static javax.swing.JTable tablasolicvehiculo;
    public static javax.swing.JTable tablonaceptadas;
    private javax.swing.JTable tablonarchivadas;
    public static javax.swing.JTable tabloncanceladas;
    public static javax.swing.JTable tablonpendientes;
    private javax.swing.JPanel tablonsolicitud1;
    private javax.swing.JTextField txtKilometraje;
    private javax.swing.JTextField txtbusquedasoli;
    private javax.swing.JTextField txtbusquedasoli1;
    private javax.swing.JTextField txtbusquedasoli2;
    private javax.swing.JTextArea txtobveh;
    private javax.swing.JTextArea txtobvia;
    // End of variables declaration//GEN-END:variables
}
